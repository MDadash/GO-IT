function changeCheck(t){var t=t,i=t.find("input").eq(0);return i.attr("checked")?(t.css("background-position","0 0"),i.attr("checked",!1)):(t.css("background-position","0 -17px"),i.attr("checked",!0)),!0}function changeCheckStart(t){var t=t,i=t.find("input").eq(0);return i.attr("checked")&&t.css("background-position","0 -17px"),!0}!function(t){"use strict";var i=t.jCarousel={};i.version="0.3.4";var e=/^([+\-]=)?(.+)$/;i.parseTarget=function(t){var i=!1,s="object"!=typeof t?e.exec(t):null;return s?(t=parseInt(s[2],10)||0,s[1]&&(i=!0,"-="===s[1]&&(t*=-1))):"object"!=typeof t&&(t=parseInt(t,10)||0),{target:t,relative:i}},i.detectCarousel=function(t){for(var i;t.length>0;){if(i=t.filter("[data-jcarousel]"),i.length>0)return i;if(i=t.find("[data-jcarousel]"),i.length>0)return i;t=t.parent()}return null},i.base=function(e){return{version:i.version,_options:{},_element:null,_carousel:null,_init:t.noop,_create:t.noop,_destroy:t.noop,_reload:t.noop,create:function(){return this._element.attr("data-"+e.toLowerCase(),!0).data(e,this),!1===this._trigger("create")?this:(this._create(),this._trigger("createend"),this)},destroy:function(){return!1===this._trigger("destroy")?this:(this._destroy(),this._trigger("destroyend"),this._element.removeData(e).removeAttr("data-"+e.toLowerCase()),this)},reload:function(t){return!1===this._trigger("reload")?this:(t&&this.options(t),this._reload(),this._trigger("reloadend"),this)},element:function(){return this._element},options:function(i,e){if(0===arguments.length)return t.extend({},this._options);if("string"==typeof i){if("undefined"==typeof e)return"undefined"==typeof this._options[i]?null:this._options[i];this._options[i]=e}else this._options=t.extend({},this._options,i);return this},carousel:function(){return this._carousel||(this._carousel=i.detectCarousel(this.options("carousel")||this._element),this._carousel||t.error('Could not detect carousel for plugin "'+e+'"')),this._carousel},_trigger:function(i,s,n){var r,o=!1;return n=[this].concat(n||[]),(s||this._element).each(function(){r=t.Event((e+":"+i).toLowerCase()),t(this).trigger(r,n),r.isDefaultPrevented()&&(o=!0)}),!o}}},i.plugin=function(e,s){var n=t[e]=function(i,e){this._element=t(i),this.options(e),this._init(),this.create()};return n.fn=n.prototype=t.extend({},i.base(e),s),t.fn[e]=function(i){var s=Array.prototype.slice.call(arguments,1),r=this;return"string"==typeof i?this.each(function(){var n=t(this).data(e);if(!n)return t.error("Cannot call methods on "+e+' prior to initialization; attempted to call method "'+i+'"');if(!t.isFunction(n[i])||"_"===i.charAt(0))return t.error('No such method "'+i+'" for '+e+" instance");var o=n[i].apply(n,s);return o!==n&&"undefined"!=typeof o?(r=o,!1):void 0}):this.each(function(){var s=t(this).data(e);s instanceof n?s.reload(i):new n(this,i)}),r},n}}(jQuery),function(t,i){"use strict";var e=function(t){return parseFloat(t)||0};t.jCarousel.plugin("jcarousel",{animating:!1,tail:0,inTail:!1,resizeTimer:null,lt:null,vertical:!1,rtl:!1,circular:!1,underflow:!1,relative:!1,_options:{list:function(){return this.element().children().eq(0)},items:function(){return this.list().children()},animation:400,transitions:!1,wrap:null,vertical:null,rtl:null,center:!1},_list:null,_items:null,_target:t(),_first:t(),_last:t(),_visible:t(),_fullyvisible:t(),_init:function(){var t=this;return this.onWindowResize=function(){t.resizeTimer&&clearTimeout(t.resizeTimer),t.resizeTimer=setTimeout(function(){t.reload()},100)},this},_create:function(){this._reload(),t(i).on("resize.jcarousel",this.onWindowResize)},_destroy:function(){t(i).off("resize.jcarousel",this.onWindowResize)},_reload:function(){this.vertical=this.options("vertical"),null==this.vertical&&(this.vertical=this.list().height()>this.list().width()),this.rtl=this.options("rtl"),null==this.rtl&&(this.rtl=function(i){if("rtl"===(""+i.attr("dir")).toLowerCase())return!0;var e=!1;return i.parents("[dir]").each(function(){if(/rtl/i.test(t(this).attr("dir")))return e=!0,!1}),e}(this._element)),this.lt=this.vertical?"top":"left",this.relative="relative"===this.list().css("position"),this._list=null,this._items=null;var i=this.index(this._target)>=0?this._target:this.closest();this.circular="circular"===this.options("wrap"),this.underflow=!1;var e={left:0,top:0};return i.length>0&&(this._prepare(i),this.list().find("[data-jcarousel-clone]").remove(),this._items=null,this.underflow=this._fullyvisible.length>=this.items().length,this.circular=this.circular&&!this.underflow,e[this.lt]=this._position(i)+"px"),this.move(e),this},list:function(){if(null===this._list){var i=this.options("list");this._list=t.isFunction(i)?i.call(this):this._element.find(i)}return this._list},items:function(){if(null===this._items){var i=this.options("items");this._items=(t.isFunction(i)?i.call(this):this.list().find(i)).not("[data-jcarousel-clone]")}return this._items},index:function(t){return this.items().index(t)},closest:function(){var i,s=this,n=this.list().position()[this.lt],r=t(),o=!1,a=this.vertical?"bottom":this.rtl&&!this.relative?"left":"right";return this.rtl&&this.relative&&!this.vertical&&(n+=this.list().width()-this.clipping()),this.items().each(function(){if(r=t(this),o)return!1;var l=s.dimension(r);if(n+=l,n>=0){if(i=l-e(r.css("margin-"+a)),!(Math.abs(n)-l+i/2<=0))return!1;o=!0}}),r},target:function(){return this._target},first:function(){return this._first},last:function(){return this._last},visible:function(){return this._visible},fullyvisible:function(){return this._fullyvisible},hasNext:function(){if(!1===this._trigger("hasnext"))return!0;var t=this.options("wrap"),i=this.items().length-1,e=this.options("center")?this._target:this._last;return!!(i>=0&&!this.underflow&&(t&&"first"!==t||this.index(e)<i||this.tail&&!this.inTail))},hasPrev:function(){if(!1===this._trigger("hasprev"))return!0;var t=this.options("wrap");return!!(this.items().length>0&&!this.underflow&&(t&&"last"!==t||this.index(this._first)>0||this.tail&&this.inTail))},clipping:function(){return this._element["inner"+(this.vertical?"Height":"Width")]()},dimension:function(t){return t["outer"+(this.vertical?"Height":"Width")](!0)},scroll:function(i,e,s){if(this.animating)return this;if(!1===this._trigger("scroll",null,[i,e]))return this;t.isFunction(e)&&(s=e,e=!0);var n=t.jCarousel.parseTarget(i);if(n.relative){var r,o,a,l,h,c,u,f,d=this.items().length-1,p=Math.abs(n.target),m=this.options("wrap");if(n.target>0){var _=this.index(this._last);if(_>=d&&this.tail)this.inTail?"both"===m||"last"===m?this._scroll(0,e,s):t.isFunction(s)&&s.call(this,!1):this._scrollTail(e,s);else if(r=this.index(this._target),this.underflow&&r===d&&("circular"===m||"both"===m||"last"===m)||!this.underflow&&_===d&&("both"===m||"last"===m))this._scroll(0,e,s);else if(a=r+p,this.circular&&a>d){for(f=d,h=this.items().get(-1);f++<a;)h=this.items().eq(0),c=this._visible.index(h)>=0,c&&h.after(h.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(h),c||(u={},u[this.lt]=this.dimension(h),this.moveBy(u)),this._items=null;this._scroll(h,e,s)}else this._scroll(Math.min(a,d),e,s)}else if(this.inTail)this._scroll(Math.max(this.index(this._first)-p+1,0),e,s);else if(o=this.index(this._first),r=this.index(this._target),l=this.underflow?r:o,a=l-p,l<=0&&(this.underflow&&"circular"===m||"both"===m||"first"===m))this._scroll(d,e,s);else if(this.circular&&a<0){for(f=a,h=this.items().get(0);f++<0;){h=this.items().eq(-1),c=this._visible.index(h)>=0,c&&h.after(h.clone(!0).attr("data-jcarousel-clone",!0)),this.list().prepend(h),this._items=null;var v=this.dimension(h);u={},u[this.lt]=-v,this.moveBy(u)}this._scroll(h,e,s)}else this._scroll(Math.max(a,0),e,s)}else this._scroll(n.target,e,s);return this._trigger("scrollend"),this},moveBy:function(t,i){var s=this.list().position(),n=1,r=0;return this.rtl&&!this.vertical&&(n=-1,this.relative&&(r=this.list().width()-this.clipping())),t.left&&(t.left=s.left+r+e(t.left)*n+"px"),t.top&&(t.top=s.top+r+e(t.top)*n+"px"),this.move(t,i)},move:function(i,e){e=e||{};var s=this.options("transitions"),n=!!s,r=!!s.transforms,o=!!s.transforms3d,a=e.duration||0,l=this.list();if(!n&&a>0)return void l.animate(i,e);var h=e.complete||t.noop,c={};if(n){var u={transitionDuration:l.css("transitionDuration"),transitionTimingFunction:l.css("transitionTimingFunction"),transitionProperty:l.css("transitionProperty")},f=h;h=function(){t(this).css(u),f.call(this)},c={transitionDuration:(a>0?a/1e3:0)+"s",transitionTimingFunction:s.easing||e.easing,transitionProperty:a>0?function(){return r||o?"all":i.left?"left":"top"}():"none",transform:"none"}}o?c.transform="translate3d("+(i.left||0)+","+(i.top||0)+",0)":r?c.transform="translate("+(i.left||0)+","+(i.top||0)+")":t.extend(c,i),n&&a>0&&l.one("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd",h),l.css(c),a<=0&&l.each(function(){h.call(this)})},_scroll:function(i,e,s){if(this.animating)return t.isFunction(s)&&s.call(this,!1),this;if("object"!=typeof i?i=this.items().eq(i):"undefined"==typeof i.jquery&&(i=t(i)),0===i.length)return t.isFunction(s)&&s.call(this,!1),this;this.inTail=!1,this._prepare(i);var n=this._position(i),r=this.list().position()[this.lt];if(n===r)return t.isFunction(s)&&s.call(this,!1),this;var o={};return o[this.lt]=n+"px",this._animate(o,e,s),this},_scrollTail:function(i,e){if(this.animating||!this.tail)return t.isFunction(e)&&e.call(this,!1),this;var s=this.list().position()[this.lt];this.rtl&&this.relative&&!this.vertical&&(s+=this.list().width()-this.clipping()),this.rtl&&!this.vertical?s+=this.tail:s-=this.tail,this.inTail=!0;var n={};return n[this.lt]=s+"px",this._update({target:this._target.next(),fullyvisible:this._fullyvisible.slice(1).add(this._visible.last())}),this._animate(n,i,e),this},_animate:function(i,e,s){if(s=s||t.noop,!1===this._trigger("animate"))return s.call(this,!1),this;this.animating=!0;var n=this.options("animation"),r=t.proxy(function(){this.animating=!1;var t=this.list().find("[data-jcarousel-clone]");t.length>0&&(t.remove(),this._reload()),this._trigger("animateend"),s.call(this,!0)},this),o="object"==typeof n?t.extend({},n):{duration:n},a=o.complete||t.noop;return e===!1?o.duration=0:"undefined"!=typeof t.fx.speeds[o.duration]&&(o.duration=t.fx.speeds[o.duration]),o.complete=function(){r(),a.call(this)},this.move(i,o),this},_prepare:function(i){var s,n,r,o,a=this.index(i),l=a,h=this.dimension(i),c=this.clipping(),u=this.vertical?"bottom":this.rtl?"left":"right",f=this.options("center"),d={target:i,first:i,last:i,visible:i,fullyvisible:h<=c?i:t()};if(f&&(h/=2,c/=2),h<c)for(;;){if(s=this.items().eq(++l),0===s.length){if(!this.circular)break;if(s=this.items().eq(0),i.get(0)===s.get(0))break;if(n=this._visible.index(s)>=0,n&&s.after(s.clone(!0).attr("data-jcarousel-clone",!0)),this.list().append(s),!n){var p={};p[this.lt]=this.dimension(s),this.moveBy(p)}this._items=null}if(o=this.dimension(s),0===o)break;if(h+=o,d.last=s,d.visible=d.visible.add(s),r=e(s.css("margin-"+u)),h-r<=c&&(d.fullyvisible=d.fullyvisible.add(s)),h>=c)break}if(!this.circular&&!f&&h<c)for(l=a;;){if(--l<0)break;if(s=this.items().eq(l),0===s.length)break;if(o=this.dimension(s),0===o)break;if(h+=o,d.first=s,d.visible=d.visible.add(s),r=e(s.css("margin-"+u)),h-r<=c&&(d.fullyvisible=d.fullyvisible.add(s)),h>=c)break}return this._update(d),this.tail=0,f||"circular"===this.options("wrap")||"custom"===this.options("wrap")||this.index(d.last)!==this.items().length-1||(h-=e(d.last.css("margin-"+u)),h>c&&(this.tail=h-c)),this},_position:function(t){var i=this._first,e=i.position()[this.lt],s=this.options("center"),n=s?this.clipping()/2-this.dimension(i)/2:0;return this.rtl&&!this.vertical?(e-=this.relative?this.list().width()-this.dimension(i):this.clipping()-this.dimension(i),e+=n):e-=n,!s&&(this.index(t)>this.index(i)||this.inTail)&&this.tail?(e=this.rtl&&!this.vertical?e-this.tail:e+this.tail,this.inTail=!0):this.inTail=!1,-e},_update:function(i){var e,s=this,n={target:this._target,first:this._first,last:this._last,visible:this._visible,fullyvisible:this._fullyvisible},r=this.index(i.first||n.first)<this.index(n.first),o=function(e){var o=[],a=[];i[e].each(function(){n[e].index(this)<0&&o.push(this)}),n[e].each(function(){i[e].index(this)<0&&a.push(this)}),r?o=o.reverse():a=a.reverse(),s._trigger(e+"in",t(o)),s._trigger(e+"out",t(a)),s["_"+e]=i[e]};for(e in i)o(e);return this}})}(jQuery,window),function(t){"use strict";t.jcarousel.fn.scrollIntoView=function(i,e,s){var n,r=t.jCarousel.parseTarget(i),o=this.index(this._fullyvisible.first()),a=this.index(this._fullyvisible.last());if(n=r.relative?r.target<0?Math.max(0,o+r.target):a+r.target:"object"!=typeof r.target?r.target:this.index(r.target),n<o)return this.scroll(n,e,s);if(n>=o&&n<=a)return t.isFunction(s)&&s.call(this,!1),this;for(var l,h=this.items(),c=this.clipping(),u=this.vertical?"bottom":this.rtl?"left":"right",f=0;;){if(l=h.eq(n),0===l.length)break;if(f+=this.dimension(l),f>=c){var d=parseFloat(l.css("margin-"+u))||0;f-d!==c&&n++;break}if(n<=0)break;n--}return this.scroll(n,e,s)}}(jQuery),function(t){"use strict";t.jCarousel.plugin("jcarouselControl",{_options:{target:"+=1",event:"click",method:"scroll"},_active:null,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onReload=t.proxy(this._reload,this),this.onEvent=t.proxy(function(i){i.preventDefault();var e=this.options("method");t.isFunction(e)?e.call(this):this.carousel().jcarousel(this.options("method"),this.options("target"))},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend jcarousel:scrollend",this.onReload),this._element.on(this.options("event")+".jcarouselcontrol",this.onEvent),this._reload()},_destroy:function(){this._element.off(".jcarouselcontrol",this.onEvent),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend jcarousel:scrollend",this.onReload)},_reload:function(){var i,e=t.jCarousel.parseTarget(this.options("target")),s=this.carousel();if(e.relative)i=s.jcarousel(e.target>0?"hasNext":"hasPrev");else{var n="object"!=typeof e.target?s.jcarousel("items").eq(e.target):e.target;i=s.jcarousel("target").index(n)>=0}return this._active!==i&&(this._trigger(i?"active":"inactive"),this._active=i),this}})}(jQuery),function(t){"use strict";t.jCarousel.plugin("jcarouselPagination",{_options:{perPage:null,item:function(t){return'<a href="#'+t+'">'+t+"</a>"},event:"click",method:"scroll"},_carouselItems:null,_pages:{},_items:{},_currentPage:null,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onReload=t.proxy(this._reload,this),this.onScroll=t.proxy(this._update,this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy).on("jcarousel:reloadend",this.onReload).on("jcarousel:scrollend",this.onScroll),this._reload()},_destroy:function(){this._clear(),this.carousel().off("jcarousel:destroy",this.onDestroy).off("jcarousel:reloadend",this.onReload).off("jcarousel:scrollend",this.onScroll),this._carouselItems=null},_reload:function(){var i=this.options("perPage");if(this._pages={},this._items={},t.isFunction(i)&&(i=i.call(this)),null==i)this._pages=this._calculatePages();else for(var e,s=parseInt(i,10)||0,n=this._getCarouselItems(),r=1,o=0;;){if(e=n.eq(o++),0===e.length)break;this._pages[r]?this._pages[r]=this._pages[r].add(e):this._pages[r]=e,o%s===0&&r++}this._clear();var a=this,l=this.carousel().data("jcarousel"),h=this._element,c=this.options("item"),u=this._getCarouselItems().length;t.each(this._pages,function(i,e){var s=a._items[i]=t(c.call(a,i,e));s.on(a.options("event")+".jcarouselpagination",t.proxy(function(){var t=e.eq(0);if(l.circular){var s=l.index(l.target()),n=l.index(t);parseFloat(i)>parseFloat(a._currentPage)?n<s&&(t="+="+(u-s+n)):n>s&&(t="-="+(s+(u-n)))}l[this.options("method")](t)},a)),h.append(s)}),this._update()},_update:function(){var i,e=this.carousel().jcarousel("target");t.each(this._pages,function(t,s){if(s.each(function(){if(e.is(this))return i=t,!1}),i)return!1}),this._currentPage!==i&&(this._trigger("inactive",this._items[this._currentPage]),this._trigger("active",this._items[i])),this._currentPage=i},items:function(){return this._items},reloadCarouselItems:function(){return this._carouselItems=null,this},_clear:function(){this._element.empty(),this._currentPage=null},_calculatePages:function(){for(var t,i,e=this.carousel().data("jcarousel"),s=this._getCarouselItems(),n=e.clipping(),r=0,o=0,a=1,l={};;){if(t=s.eq(o++),0===t.length)break;i=e.dimension(t),r+i>n&&(a++,r=0),r+=i,l[a]?l[a]=l[a].add(t):l[a]=t}return l},_getCarouselItems:function(){return this._carouselItems||(this._carouselItems=this.carousel().jcarousel("items")),this._carouselItems}})}(jQuery),function(t,i){"use strict";var e,s,n={hidden:"visibilitychange",mozHidden:"mozvisibilitychange",msHidden:"msvisibilitychange",webkitHidden:"webkitvisibilitychange"};t.each(n,function(t,n){if("undefined"!=typeof i[t])return e=t,s=n,!1}),t.jCarousel.plugin("jcarouselAutoscroll",{_options:{target:"+=1",interval:3e3,autostart:!0},_timer:null,_started:!1,_init:function(){this.onDestroy=t.proxy(function(){this._destroy(),this.carousel().one("jcarousel:createend",t.proxy(this._create,this))},this),this.onAnimateEnd=t.proxy(this._start,this),this.onVisibilityChange=t.proxy(function(){i[e]?this._stop():this._start()},this)},_create:function(){this.carousel().one("jcarousel:destroy",this.onDestroy),t(i).on(s,this.onVisibilityChange),this.options("autostart")&&this.start()},_destroy:function(){this._stop(),this.carousel().off("jcarousel:destroy",this.onDestroy),t(i).off(s,this.onVisibilityChange)},_start:function(){if(this._stop(),this._started)return this.carousel().one("jcarousel:animateend",this.onAnimateEnd),this._timer=setTimeout(t.proxy(function(){this.carousel().jcarousel("scroll",this.options("target"))},this),this.options("interval")),this},_stop:function(){return this._timer&&(this._timer=clearTimeout(this._timer)),this.carousel().off("jcarousel:animateend",this.onAnimateEnd),this},start:function(){return this._started=!0,this._start(),this},stop:function(){return this._started=!1,this._stop(),this}})}(jQuery,document),function(t){t(function(){t(".jcarousel").jcarousel(),t(".jcarousel-control-prev").on("jcarouselcontrol:active",function(){t(this).removeClass("inactive")}).on("jcarouselcontrol:inactive",function(){t(this).addClass("inactive")}).jcarouselControl({target:"-=1"}),t(".jcarousel-control-next").on("jcarouselcontrol:active",function(){t(this).removeClass("inactive")}).on("jcarouselcontrol:inactive",function(){t(this).addClass("inactive")}).jcarouselControl({target:"+=1"}),t(".jcarousel-pagination").on("jcarouselpagination:active","a",function(){t(this).addClass("active")}).on("jcarouselpagination:inactive","a",function(){t(this).removeClass("active")}).jcarouselPagination()})}(jQuery),jQuery.fn.selectbox=function(t){var i={className:"jquery-selectbox",animationSpeed:"normal",listboxMaxSize:10,replaceInvisible:!1},e="jquery-custom-selectboxes-replaced",s=!1,n=function(t){var e=t.parents("."+i.className);return t.slideDown(i.animationSpeed,function(){s=!0}),e.addClass("selecthover"),jQuery(document).bind("click",o),t},r=function(t){t.parents("."+i.className);return t.slideUp(i.animationSpeed,function(){s=!1,jQuery(this).parents("."+i.className).removeClass("selecthover")}),jQuery(document).unbind("click",o),t},o=function(t){var n=t.target,o=jQuery("."+i.className+"-list:visible").parent().find("*").addBack();return jQuery.inArray(n,o)<0&&s&&r(jQuery("."+e+"-list")),!1};return i=jQuery.extend(i,t||{}),this.each(function(){var t=jQuery(this);if(0!=t.filter(":visible").length||i.replaceInvisible){var s=jQuery('<div class="'+i.className+" "+e+'"><div class="'+i.className+'-moreButton" /><div class="'+i.className+"-list "+e+'-list" /><span class="'+i.className+'-currentItem" /></div>');jQuery("option",t).each(function(t,e){var e=jQuery(e),o=jQuery('<span class="'+i.className+"-item value-"+e.val()+" item-"+t+'">'+e.text()+"</span>");o.click(function(){var t=jQuery(this),e=t.parents("."+i.className),s=t[0].className.split(" ");for(k1 in s)if(/^item-[0-9]+$/.test(s[k1])){s=parseInt(s[k1].replace("item-",""),10);break}var o=t[0].className.split(" ");for(k1 in o)if(/^value-.+$/.test(o[k1])){o=o[k1].replace("value-","");break}e.find("."+i.className+"-currentItem").text(t.text()),e.find("select").val(o).triggerHandler("change");var a=e.find("."+i.className+"-list");a.filter(":visible").length>0?r(a):n(a)}).bind("mouseenter",function(){jQuery(this).addClass("listelementhover")}).bind("mouseleave",function(){jQuery(this).removeClass("listelementhover")}),jQuery("."+i.className+"-list",s).append(o),e.filter(":selected").length>0&&jQuery("."+i.className+"-currentItem",s).text(e.text())}),s.find("."+i.className+"-moreButton").click(function(){var t=jQuery(this),e=jQuery("."+i.className+"-list").not(t.siblings("."+i.className+"-list"));r(e);var s=t.siblings("."+i.className+"-list");s.filter(":visible").length>0?r(s):n(s)}).bind("mouseenter",function(){jQuery(this).addClass("morebuttonhover")}).bind("mouseleave",function(){jQuery(this).removeClass("morebuttonhover")}),t.hide().replaceWith(s).appendTo(s);var o=s.find("."+i.className+"-list"),a=o.find("."+i.className+"-item").length;a>i.listboxMaxSize&&(a=i.listboxMaxSize),0==a&&(a=1);var l=Math.round(t.width()+5);s.css("width",l+"px"),o.css({width:Math.round(l-5)+"px",height:a+"em"})}})},jQuery.fn.unselectbox=function(){var t="jquery-custom-selectboxes-replaced";return this.each(function(){var i=jQuery(this).filter("."+t);i.replaceWith(i.find("select").show())})},$(document).ready(function(){$("#default-usage-select").selectbox()}),jQuery(document).ready(function(){jQuery(".checkbox-js__input-wrapper").mousedown(function(){changeCheck(jQuery(this))}),jQuery(".checkbox-js__input-wrapper").each(function(){changeCheckStart(jQuery(this))})}),$(document).ready(function(){$(".drop_box").hover(function(){$(this).find(".submenu").stop().slideDown(700).animate({backgroundColor:"#0A0A0A"},500)},function(){$(this).find(".submenu").stop().animate({backgroundColor:"#303030"},400).slideUp(500)}),$(".drop_box-level-2").hover(function(){$(this).find("ul").stop().slideDown(800).animate({backgroundColor:"#0A0A0A"},500)},function(){$(this).find("ul").stop().animate({backgroundColor:"#303030"},400).slideUp(500)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsiY2hhbmdlQ2hlY2siLCJlbCIsImlucHV0IiwiZmluZCIsImVxIiwiYXR0ciIsImNzcyIsImNoYW5nZUNoZWNrU3RhcnQiLCIkIiwiakNhcm91c2VsIiwidmVyc2lvbiIsInJSZWxhdGl2ZVRhcmdldCIsInBhcnNlVGFyZ2V0IiwidGFyZ2V0IiwicmVsYXRpdmUiLCJwYXJ0cyIsImV4ZWMiLCJwYXJzZUludCIsImRldGVjdENhcm91c2VsIiwiZWxlbWVudCIsImNhcm91c2VsIiwibGVuZ3RoIiwiZmlsdGVyIiwicGFyZW50IiwiYmFzZSIsInBsdWdpbk5hbWUiLCJfb3B0aW9ucyIsIl9lbGVtZW50IiwiX2Nhcm91c2VsIiwiX2luaXQiLCJub29wIiwiX2NyZWF0ZSIsIl9kZXN0cm95IiwiX3JlbG9hZCIsImNyZWF0ZSIsInRoaXMiLCJ0b0xvd2VyQ2FzZSIsImRhdGEiLCJfdHJpZ2dlciIsImRlc3Ryb3kiLCJyZW1vdmVEYXRhIiwicmVtb3ZlQXR0ciIsInJlbG9hZCIsIm9wdGlvbnMiLCJrZXkiLCJ2YWx1ZSIsImFyZ3VtZW50cyIsImV4dGVuZCIsImVycm9yIiwidHlwZSIsImV2ZW50IiwiZGVmYXVsdFByZXZlbnRlZCIsImNvbmNhdCIsImVhY2giLCJFdmVudCIsInRyaWdnZXIiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJwbHVnaW4iLCJwbHVnaW5Qcm90b3R5cGUiLCJQbHVnaW4iLCJmbiIsInByb3RvdHlwZSIsImFyZ3MiLCJBcnJheSIsInNsaWNlIiwiY2FsbCIsInJldHVyblZhbHVlIiwiaW5zdGFuY2UiLCJpc0Z1bmN0aW9uIiwiY2hhckF0IiwibWV0aG9kVmFsdWUiLCJhcHBseSIsImpRdWVyeSIsIndpbmRvdyIsInRvRmxvYXQiLCJ2YWwiLCJwYXJzZUZsb2F0IiwiYW5pbWF0aW5nIiwidGFpbCIsImluVGFpbCIsInJlc2l6ZVRpbWVyIiwibHQiLCJ2ZXJ0aWNhbCIsInJ0bCIsImNpcmN1bGFyIiwidW5kZXJmbG93IiwibGlzdCIsImNoaWxkcmVuIiwiaXRlbXMiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9ucyIsIndyYXAiLCJjZW50ZXIiLCJfbGlzdCIsIl9pdGVtcyIsIl90YXJnZXQiLCJfZmlyc3QiLCJfbGFzdCIsIl92aXNpYmxlIiwiX2Z1bGx5dmlzaWJsZSIsInNlbGYiLCJvbldpbmRvd1Jlc2l6ZSIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJvbiIsIm9mZiIsImhlaWdodCIsIndpZHRoIiwiZm91bmQiLCJwYXJlbnRzIiwidGVzdCIsIml0ZW0iLCJpbmRleCIsImNsb3Nlc3QiLCJwcm9wcyIsImxlZnQiLCJ0b3AiLCJfcHJlcGFyZSIsInJlbW92ZSIsIl9wb3NpdGlvbiIsIm1vdmUiLCJvcHRpb24iLCJub3QiLCJwb3MiLCJwb3NpdGlvbiIsInN0b3AiLCJscmIiLCJjbGlwcGluZyIsImRpbSIsImRpbWVuc2lvbiIsIk1hdGgiLCJhYnMiLCJmaXJzdCIsImxhc3QiLCJ2aXNpYmxlIiwiZnVsbHl2aXNpYmxlIiwiaGFzTmV4dCIsImVuZCIsImNoZWNrIiwiaGFzUHJldiIsInNjcm9sbCIsImFuaW1hdGUiLCJjYWxsYmFjayIsInBhcnNlZCIsImN1cnJlbnQiLCJzdGFydCIsImN1cnIiLCJpc1Zpc2libGUiLCJpIiwiX3Njcm9sbCIsIl9zY3JvbGxUYWlsIiwiZ2V0IiwiYWZ0ZXIiLCJjbG9uZSIsImFwcGVuZCIsIm1vdmVCeSIsIm1pbiIsIm1heCIsInByZXBlbmQiLCJwcm9wZXJ0aWVzIiwib3B0cyIsIm11bHRpcGxpZXIiLCJjb3JyZWN0aW9uIiwidHJhbnNmb3JtcyIsInRyYW5zZm9ybXMzZCIsImR1cmF0aW9uIiwiY29tcGxldGUiLCJiYWNrdXAiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJ0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24iLCJ0cmFuc2l0aW9uUHJvcGVydHkiLCJvbGRDb21wbGV0ZSIsImVhc2luZyIsInRyYW5zZm9ybSIsIm9uZSIsImpxdWVyeSIsImN1cnJQb3MiLCJfYW5pbWF0ZSIsIl91cGRhdGUiLCJuZXh0IiwiYWRkIiwicHJveHkiLCJjIiwiZngiLCJzcGVlZHMiLCJtYXJnaW4iLCJpZHgiLCJ3aCIsImNsaXAiLCJ1cGRhdGUiLCJjZW50ZXJPZmZzZXQiLCJiYWNrIiwiZG9VcGRhdGUiLCJlbEluIiwiZWxPdXQiLCJwdXNoIiwicmV2ZXJzZSIsImpjYXJvdXNlbCIsInNjcm9sbEludG9WaWV3IiwibWV0aG9kIiwiX2FjdGl2ZSIsIm9uRGVzdHJveSIsIm9uUmVsb2FkIiwib25FdmVudCIsImUiLCJwcmV2ZW50RGVmYXVsdCIsImFjdGl2ZSIsInBlclBhZ2UiLCJwYWdlIiwiX2Nhcm91c2VsSXRlbXMiLCJfcGFnZXMiLCJfY3VycmVudFBhZ2UiLCJvblNjcm9sbCIsIl9jbGVhciIsIl9jYWxjdWxhdGVQYWdlcyIsInBwIiwiX2dldENhcm91c2VsSXRlbXMiLCJudW1DYXJvdXNlbEl0ZW1zIiwiY2Fyb3VzZWxJdGVtcyIsImN1cnJJdGVtIiwiY3VycmVudEluZGV4IiwibmV3SW5kZXgiLCJjdXJyZW50UGFnZSIsImlzIiwicmVsb2FkQ2Fyb3VzZWxJdGVtcyIsImVtcHR5IiwicGFnZXMiLCJkb2N1bWVudCIsImhpZGRlblByb3AiLCJ2aXNpYmlsaXR5Q2hhbmdlRXZlbnQiLCJ2aXNpYmlsaXR5Q2hhbmdlRXZlbnROYW1lcyIsImhpZGRlbiIsIm1vekhpZGRlbiIsIm1zSGlkZGVuIiwid2Via2l0SGlkZGVuIiwiaW50ZXJ2YWwiLCJhdXRvc3RhcnQiLCJfdGltZXIiLCJfc3RhcnRlZCIsIm9uQW5pbWF0ZUVuZCIsIl9zdGFydCIsIm9uVmlzaWJpbGl0eUNoYW5nZSIsIl9zdG9wIiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImpjYXJvdXNlbENvbnRyb2wiLCJqY2Fyb3VzZWxQYWdpbmF0aW9uIiwic2VsZWN0Ym94Iiwic2V0dGluZ3MiLCJjbGFzc05hbWUiLCJhbmltYXRpb25TcGVlZCIsImxpc3Rib3hNYXhTaXplIiwicmVwbGFjZUludmlzaWJsZSIsImNvbW1vbkNsYXNzIiwibGlzdE9wZW4iLCJzaG93TGlzdCIsImxpc3RPYmoiLCJzbGlkZURvd24iLCJiaW5kIiwib25CbHVyTGlzdCIsImhpZGVMaXN0Iiwic2xpZGVVcCIsInVuYmluZCIsInRyZ3QiLCJjdXJyZW50TGlzdEVsZW1lbnRzIiwiYWRkQmFjayIsImluQXJyYXkiLCJfdGhpcyIsInJlcGxhY2VtZW50IiwiayIsInYiLCJsaXN0RWxlbWVudCIsInRleHQiLCJjbGljayIsInRoaXNMaXN0RWxlbWVudCIsInRoaXNSZXBsYWNtZW50IiwidGhpc0luZGV4Iiwic3BsaXQiLCJrMSIsInJlcGxhY2UiLCJ0aGlzVmFsdWUiLCJ0cmlnZ2VySGFuZGxlciIsInRoaXNTdWJsaXN0IiwidGhpc01vcmVCdXR0b24iLCJvdGhlckxpc3RzIiwic2libGluZ3MiLCJ0aGlzTGlzdCIsImhpZGUiLCJyZXBsYWNlV2l0aCIsImFwcGVuZFRvIiwidGhpc0xpc3RCb3giLCJ0aGlzTGlzdEJveFNpemUiLCJ0aGlzTGlzdEJveFdpZHRoIiwicm91bmQiLCJ1bnNlbGVjdGJveCIsInNlbGVjdFRvUmVtb3ZlIiwic2hvdyIsInJlYWR5IiwibW91c2Vkb3duIiwiaG92ZXIiLCJiYWNrZ3JvdW5kQ29sb3IiXSwibWFwcGluZ3MiOiJBQTBvREEsUUFBU0EsYUFBWUMsR0FDbkIsR0FBSUEsR0FBS0EsRUFDVEMsRUFBUUQsRUFBR0UsS0FBSyxTQUFTQyxHQUFHLEVBUTVCLE9BUElGLEdBQU1HLEtBQUssWUFJZEosRUFBR0ssSUFBSSxzQkFBc0IsT0FDN0JKLEVBQU1HLEtBQUssV0FBVyxLQUp0QkosRUFBR0ssSUFBSSxzQkFBc0IsV0FDN0JKLEVBQU1HLEtBQUssV0FBVyxLQUtoQixFQUlULFFBQVNFLGtCQUFpQk4sR0FDekIsR0FBSUEsR0FBS0EsRUFDUkMsRUFBUUQsRUFBR0UsS0FBSyxTQUFTQyxHQUFHLEVBSTVCLE9BSEdGLEdBQU1HLEtBQUssWUFDYkosRUFBR0ssSUFBSSxzQkFBc0IsWUFFdkIsR0ExcERSLFNBQVNFLEdBQ04sWUFF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LFlBQVkwSCxPQUFPb0ksVUFBVSxLQUFLcEgsU0FDeEMrSixnQkFBaUIsV0FDZCxNQUVYLFdBQ0NwUyxFQUFFMkIsTUFBTWhDLEtBQUssWUFBWTBILE9BQU9nQixTQUN6QitKLGdCQUFpQixXQUNkLEtBQU12QyxRQUFRLE9BSTFCN1AsRUFBRSxxQkFBcUJtUyxNQUN0QixXQUNDblMsRUFBRTJCLE1BQU1oQyxLQUFLLE1BQU0wSCxPQUFPb0ksVUFBVSxLQUFLcEgsU0FDbEMrSixnQkFBaUIsV0FDZCxNQUVYLFdBQ0NwUyxFQUFFMkIsTUFBTWhDLEtBQUssTUFBTTBILE9BQU9nQixTQUNuQitKLGdCQUFpQixXQUNkLEtBQU12QyxRQUFRIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8qISBqQ2Fyb3VzZWwgLSB2MC4zLjQgLSAyMDE1LTA5LTIzXHJcbiogaHR0cDovL3NvcmdhbGxhLmNvbS9qY2Fyb3VzZWwvXHJcbiogQ29weXJpZ2h0IChjKSAyMDA2LTIwMTUgSmFuIFNvcmdhbGxhOyBMaWNlbnNlZCBNSVQgKi9cclxuKGZ1bmN0aW9uKCQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgakNhcm91c2VsID0gJC5qQ2Fyb3VzZWwgPSB7fTtcclxuXHJcbiAgICBqQ2Fyb3VzZWwudmVyc2lvbiA9ICcwLjMuNCc7XHJcblxyXG4gICAgdmFyIHJSZWxhdGl2ZVRhcmdldCA9IC9eKFsrXFwtXT0pPyguKykkLztcclxuXHJcbiAgICBqQ2Fyb3VzZWwucGFyc2VUYXJnZXQgPSBmdW5jdGlvbih0YXJnZXQpIHtcclxuICAgICAgICB2YXIgcmVsYXRpdmUgPSBmYWxzZSxcclxuICAgICAgICAgICAgcGFydHMgICAgPSB0eXBlb2YgdGFyZ2V0ICE9PSAnb2JqZWN0JyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJSZWxhdGl2ZVRhcmdldC5leGVjKHRhcmdldCkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsO1xyXG5cclxuICAgICAgICBpZiAocGFydHMpIHtcclxuICAgICAgICAgICAgdGFyZ2V0ID0gcGFyc2VJbnQocGFydHNbMl0sIDEwKSB8fCAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBhcnRzWzFdKSB7XHJcbiAgICAgICAgICAgICAgICByZWxhdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAocGFydHNbMV0gPT09ICctPScpIHtcclxuICAgICAgICAgICAgICAgICAgICB0YXJnZXQgKj0gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IHBhcnNlSW50KHRhcmdldCwgMTApIHx8IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcclxuICAgICAgICAgICAgcmVsYXRpdmU6IHJlbGF0aXZlXHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgakNhcm91c2VsLmRldGVjdENhcm91c2VsID0gZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgICAgIHZhciBjYXJvdXNlbDtcclxuXHJcbiAgICAgICAgd2hpbGUgKGVsZW1lbnQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjYXJvdXNlbCA9IGVsZW1lbnQuZmlsdGVyKCdbZGF0YS1qY2Fyb3VzZWxdJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2Fyb3VzZWwubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhcm91c2VsO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjYXJvdXNlbCA9IGVsZW1lbnQuZmluZCgnW2RhdGEtamNhcm91c2VsXScpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNhcm91c2VsLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYXJvdXNlbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH07XHJcblxyXG4gICAgakNhcm91c2VsLmJhc2UgPSBmdW5jdGlvbihwbHVnaW5OYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmVyc2lvbjogIGpDYXJvdXNlbC52ZXJzaW9uLFxyXG4gICAgICAgICAgICBfb3B0aW9uczogIHt9LFxyXG4gICAgICAgICAgICBfZWxlbWVudDogIG51bGwsXHJcbiAgICAgICAgICAgIF9jYXJvdXNlbDogbnVsbCxcclxuICAgICAgICAgICAgX2luaXQ6ICAgICAkLm5vb3AsXHJcbiAgICAgICAgICAgIF9jcmVhdGU6ICAgJC5ub29wLFxyXG4gICAgICAgICAgICBfZGVzdHJveTogICQubm9vcCxcclxuICAgICAgICAgICAgX3JlbG9hZDogICAkLm5vb3AsXHJcbiAgICAgICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2RhdGEtJyArIHBsdWdpbk5hbWUudG9Mb3dlckNhc2UoKSwgdHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICAuZGF0YShwbHVnaW5OYW1lLCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZmFsc2UgPT09IHRoaXMuX3RyaWdnZXIoJ2NyZWF0ZScpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignY3JlYXRlZW5kJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZhbHNlID09PSB0aGlzLl90cmlnZ2VyKCdkZXN0cm95JykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignZGVzdHJveWVuZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICAucmVtb3ZlRGF0YShwbHVnaW5OYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLScgKyBwbHVnaW5OYW1lLnRvTG93ZXJDYXNlKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZWxvYWQ6IGZ1bmN0aW9uKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmYWxzZSA9PT0gdGhpcy5fdHJpZ2dlcigncmVsb2FkJykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyhvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWxvYWQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdyZWxvYWRlbmQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZWxlbWVudDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb3B0aW9uczogZnVuY3Rpb24oa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdGhpcy5fb3B0aW9uc1trZXldID09PSAndW5kZWZpbmVkJyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9uc1trZXldO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3B0aW9uc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMgPSAkLmV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucywga2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2Fyb3VzZWw6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jYXJvdXNlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nhcm91c2VsID0gakNhcm91c2VsLmRldGVjdENhcm91c2VsKHRoaXMub3B0aW9ucygnY2Fyb3VzZWwnKSB8fCB0aGlzLl9lbGVtZW50KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jYXJvdXNlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVycm9yKCdDb3VsZCBub3QgZGV0ZWN0IGNhcm91c2VsIGZvciBwbHVnaW4gXCInICsgcGx1Z2luTmFtZSArICdcIicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2Fyb3VzZWw7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIF90cmlnZ2VyOiBmdW5jdGlvbih0eXBlLCBlbGVtZW50LCBkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGRhdGEgPSBbdGhpc10uY29uY2F0KGRhdGEgfHwgW10pO1xyXG5cclxuICAgICAgICAgICAgICAgIChlbGVtZW50IHx8IHRoaXMuX2VsZW1lbnQpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQgPSAkLkV2ZW50KChwbHVnaW5OYW1lICsgJzonICsgdHlwZSkudG9Mb3dlckNhc2UoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICQodGhpcykudHJpZ2dlcihldmVudCwgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIWRlZmF1bHRQcmV2ZW50ZWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICBqQ2Fyb3VzZWwucGx1Z2luID0gZnVuY3Rpb24ocGx1Z2luTmFtZSwgcGx1Z2luUHJvdG90eXBlKSB7XHJcbiAgICAgICAgdmFyIFBsdWdpbiA9ICRbcGx1Z2luTmFtZV0gPSBmdW5jdGlvbihlbGVtZW50LCBvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQgPSAkKGVsZW1lbnQpO1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMob3B0aW9ucyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9pbml0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlKCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgUGx1Z2luLmZuID0gUGx1Z2luLnByb3RvdHlwZSA9ICQuZXh0ZW5kKFxyXG4gICAgICAgICAgICB7fSxcclxuICAgICAgICAgICAgakNhcm91c2VsLmJhc2UocGx1Z2luTmFtZSksXHJcbiAgICAgICAgICAgIHBsdWdpblByb3RvdHlwZVxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgICQuZm5bcGx1Z2luTmFtZV0gPSBmdW5jdGlvbihvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHZhciBhcmdzICAgICAgICA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSksXHJcbiAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gJCh0aGlzKS5kYXRhKHBsdWdpbk5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkLmVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0Nhbm5vdCBjYWxsIG1ldGhvZHMgb24gJyArIHBsdWdpbk5hbWUgKyAnIHByaW9yIHRvIGluaXRpYWxpemF0aW9uOyAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhdHRlbXB0ZWQgdG8gY2FsbCBtZXRob2QgXCInICsgb3B0aW9ucyArICdcIidcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghJC5pc0Z1bmN0aW9uKGluc3RhbmNlW29wdGlvbnNdKSB8fCBvcHRpb25zLmNoYXJBdCgwKSA9PT0gJ18nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkLmVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ05vIHN1Y2ggbWV0aG9kIFwiJyArIG9wdGlvbnMgKyAnXCIgZm9yICcgKyBwbHVnaW5OYW1lICsgJyBpbnN0YW5jZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZXRob2RWYWx1ZSA9IGluc3RhbmNlW29wdGlvbnNdLmFwcGx5KGluc3RhbmNlLCBhcmdzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZFZhbHVlICE9PSBpbnN0YW5jZSAmJiB0eXBlb2YgbWV0aG9kVmFsdWUgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gbWV0aG9kVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSAkKHRoaXMpLmRhdGEocGx1Z2luTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZSBpbnN0YW5jZW9mIFBsdWdpbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZS5yZWxvYWQob3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFBsdWdpbih0aGlzLCBvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbHVlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBQbHVnaW47XHJcbiAgICB9O1xyXG59KGpRdWVyeSkpO1xyXG5cclxuKGZ1bmN0aW9uKCQsIHdpbmRvdykge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciB0b0Zsb2F0ID0gZnVuY3Rpb24odmFsKSB7XHJcbiAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsKSB8fCAwO1xyXG4gICAgfTtcclxuXHJcbiAgICAkLmpDYXJvdXNlbC5wbHVnaW4oJ2pjYXJvdXNlbCcsIHtcclxuICAgICAgICBhbmltYXRpbmc6ICAgZmFsc2UsXHJcbiAgICAgICAgdGFpbDogICAgICAgIDAsXHJcbiAgICAgICAgaW5UYWlsOiAgICAgIGZhbHNlLFxyXG4gICAgICAgIHJlc2l6ZVRpbWVyOiBudWxsLFxyXG4gICAgICAgIGx0OiAgICAgICAgICBudWxsLFxyXG4gICAgICAgIHZlcnRpY2FsOiAgICBmYWxzZSxcclxuICAgICAgICBydGw6ICAgICAgICAgZmFsc2UsXHJcbiAgICAgICAgY2lyY3VsYXI6ICAgIGZhbHNlLFxyXG4gICAgICAgIHVuZGVyZmxvdzogICBmYWxzZSxcclxuICAgICAgICByZWxhdGl2ZTogICAgZmFsc2UsXHJcblxyXG4gICAgICAgIF9vcHRpb25zOiB7XHJcbiAgICAgICAgICAgIGxpc3Q6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudCgpLmNoaWxkcmVuKCkuZXEoMCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGl0ZW1zOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QoKS5jaGlsZHJlbigpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhbmltYXRpb246ICAgNDAwLFxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uczogZmFsc2UsXHJcbiAgICAgICAgICAgIHdyYXA6ICAgICAgICBudWxsLFxyXG4gICAgICAgICAgICB2ZXJ0aWNhbDogICAgbnVsbCxcclxuICAgICAgICAgICAgcnRsOiAgICAgICAgIG51bGwsXHJcbiAgICAgICAgICAgIGNlbnRlcjogICAgICBmYWxzZVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIFByb3RlY3RlZCwgZG9uJ3QgYWNjZXNzIGRpcmVjdGx5XHJcbiAgICAgICAgX2xpc3Q6ICAgICAgICAgbnVsbCxcclxuICAgICAgICBfaXRlbXM6ICAgICAgICBudWxsLFxyXG4gICAgICAgIF90YXJnZXQ6ICAgICAgICQoKSxcclxuICAgICAgICBfZmlyc3Q6ICAgICAgICAkKCksXHJcbiAgICAgICAgX2xhc3Q6ICAgICAgICAgJCgpLFxyXG4gICAgICAgIF92aXNpYmxlOiAgICAgICQoKSxcclxuICAgICAgICBfZnVsbHl2aXNpYmxlOiAkKCksXHJcbiAgICAgICAgX2luaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uV2luZG93UmVzaXplID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZi5yZXNpemVUaW1lcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChzZWxmLnJlc2l6ZVRpbWVyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzZWxmLnJlc2l6ZVRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgfSwgMTAwKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2NyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbG9hZCgpO1xyXG5cclxuICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdyZXNpemUuamNhcm91c2VsJywgdGhpcy5vbldpbmRvd1Jlc2l6ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfZGVzdHJveTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICQod2luZG93KS5vZmYoJ3Jlc2l6ZS5qY2Fyb3VzZWwnLCB0aGlzLm9uV2luZG93UmVzaXplKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9yZWxvYWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLnZlcnRpY2FsID0gdGhpcy5vcHRpb25zKCd2ZXJ0aWNhbCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMudmVydGljYWwgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbCA9IHRoaXMubGlzdCgpLmhlaWdodCgpID4gdGhpcy5saXN0KCkud2lkdGgoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5ydGwgPSB0aGlzLm9wdGlvbnMoJ3J0bCcpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucnRsID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucnRsID0gKGZ1bmN0aW9uKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKCcnICsgZWxlbWVudC5hdHRyKCdkaXInKSkudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZm91bmQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5wYXJlbnRzKCdbZGlyXScpLmVhY2goZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoL3J0bC9pKS50ZXN0KCQodGhpcykuYXR0cignZGlyJykpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvdW5kO1xyXG4gICAgICAgICAgICAgICAgfSh0aGlzLl9lbGVtZW50KSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMubHQgPSB0aGlzLnZlcnRpY2FsID8gJ3RvcCcgOiAnbGVmdCc7XHJcblxyXG4gICAgICAgICAgICAvLyBFbnN1cmUgYmVmb3JlIGNsb3Nlc3QoKSBjYWxsXHJcbiAgICAgICAgICAgIHRoaXMucmVsYXRpdmUgPSB0aGlzLmxpc3QoKS5jc3MoJ3Bvc2l0aW9uJykgPT09ICdyZWxhdGl2ZSc7XHJcblxyXG4gICAgICAgICAgICAvLyBGb3JjZSBsaXN0IGFuZCBpdGVtcyByZWxvYWRcclxuICAgICAgICAgICAgdGhpcy5fbGlzdCAgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXMuaW5kZXgodGhpcy5fdGFyZ2V0KSA+PSAwID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGFyZ2V0IDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZXN0KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBfcHJlcGFyZSgpIG5lZWRzIHRoaXMgaGVyZVxyXG4gICAgICAgICAgICB0aGlzLmNpcmN1bGFyICA9IHRoaXMub3B0aW9ucygnd3JhcCcpID09PSAnY2lyY3VsYXInO1xyXG4gICAgICAgICAgICB0aGlzLnVuZGVyZmxvdyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgdmFyIHByb3BzID0geydsZWZ0JzogMCwgJ3RvcCc6IDB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKGl0ZW0ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJlcGFyZShpdGVtKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdCgpLmZpbmQoJ1tkYXRhLWpjYXJvdXNlbC1jbG9uZV0nKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBGb3JjZSBpdGVtcyByZWxvYWRcclxuICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1zID0gbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuZGVyZmxvdyA9IHRoaXMuX2Z1bGx5dmlzaWJsZS5sZW5ndGggPj0gdGhpcy5pdGVtcygpLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2lyY3VsYXIgID0gdGhpcy5jaXJjdWxhciAmJiAhdGhpcy51bmRlcmZsb3c7XHJcblxyXG4gICAgICAgICAgICAgICAgcHJvcHNbdGhpcy5sdF0gPSB0aGlzLl9wb3NpdGlvbihpdGVtKSArICdweCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMubW92ZShwcm9wcyk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxpc3Q6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fbGlzdCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9IHRoaXMub3B0aW9ucygnbGlzdCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGlzdCA9ICQuaXNGdW5jdGlvbihvcHRpb24pID8gb3B0aW9uLmNhbGwodGhpcykgOiB0aGlzLl9lbGVtZW50LmZpbmQob3B0aW9uKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpdGVtczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pdGVtcyA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9IHRoaXMub3B0aW9ucygnaXRlbXMnKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1zID0gKCQuaXNGdW5jdGlvbihvcHRpb24pID8gb3B0aW9uLmNhbGwodGhpcykgOiB0aGlzLmxpc3QoKS5maW5kKG9wdGlvbikpLm5vdCgnW2RhdGEtamNhcm91c2VsLWNsb25lXScpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXRlbXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbmRleDogZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtcygpLmluZGV4KGl0ZW0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY2xvc2VzdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxmICAgID0gdGhpcyxcclxuICAgICAgICAgICAgICAgIHBvcyAgICAgPSB0aGlzLmxpc3QoKS5wb3NpdGlvbigpW3RoaXMubHRdLFxyXG4gICAgICAgICAgICAgICAgY2xvc2VzdCA9ICQoKSwgLy8gRW5zdXJlIHdlJ3JlIHJldHVybmluZyBhIGpRdWVyeSBpbnN0YW5jZVxyXG4gICAgICAgICAgICAgICAgc3RvcCAgICA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgbHJiICAgICA9IHRoaXMudmVydGljYWwgPyAnYm90dG9tJyA6ICh0aGlzLnJ0bCAmJiAhdGhpcy5yZWxhdGl2ZSA/ICdsZWZ0JyA6ICdyaWdodCcpLFxyXG4gICAgICAgICAgICAgICAgd2lkdGg7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5ydGwgJiYgdGhpcy5yZWxhdGl2ZSAmJiAhdGhpcy52ZXJ0aWNhbCkge1xyXG4gICAgICAgICAgICAgICAgcG9zICs9IHRoaXMubGlzdCgpLndpZHRoKCkgLSB0aGlzLmNsaXBwaW5nKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMoKS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY2xvc2VzdCA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHN0b3ApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRpbSA9IHNlbGYuZGltZW5zaW9uKGNsb3Nlc3QpO1xyXG5cclxuICAgICAgICAgICAgICAgIHBvcyArPSBkaW07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHBvcyA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBkaW0gLSB0b0Zsb2F0KGNsb3Nlc3QuY3NzKCdtYXJnaW4tJyArIGxyYikpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKE1hdGguYWJzKHBvcykgLSBkaW0gKyAod2lkdGggLyAyKSkgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdG9wID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICByZXR1cm4gY2xvc2VzdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRhcmdldDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90YXJnZXQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmaXJzdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9maXJzdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGxhc3Q6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbGFzdDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHZpc2libGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdmlzaWJsZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZ1bGx5dmlzaWJsZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mdWxseXZpc2libGU7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYXNOZXh0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGZhbHNlID09PSB0aGlzLl90cmlnZ2VyKCdoYXNuZXh0JykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgd3JhcCA9IHRoaXMub3B0aW9ucygnd3JhcCcpLFxyXG4gICAgICAgICAgICAgICAgZW5kID0gdGhpcy5pdGVtcygpLmxlbmd0aCAtIDEsXHJcbiAgICAgICAgICAgICAgICBjaGVjayA9IHRoaXMub3B0aW9ucygnY2VudGVyJykgPyB0aGlzLl90YXJnZXQgOiB0aGlzLl9sYXN0O1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGVuZCA+PSAwICYmICF0aGlzLnVuZGVyZmxvdyAmJlxyXG4gICAgICAgICAgICAgICAgKCh3cmFwICYmIHdyYXAgIT09ICdmaXJzdCcpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMuaW5kZXgoY2hlY2spIDwgZW5kKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnRhaWwgJiYgIXRoaXMuaW5UYWlsKSkgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYXNQcmV2OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGZhbHNlID09PSB0aGlzLl90cmlnZ2VyKCdoYXNwcmV2JykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgd3JhcCA9IHRoaXMub3B0aW9ucygnd3JhcCcpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXMoKS5sZW5ndGggPiAwICYmICF0aGlzLnVuZGVyZmxvdyAmJlxyXG4gICAgICAgICAgICAgICAgKCh3cmFwICYmIHdyYXAgIT09ICdsYXN0JykgfHxcclxuICAgICAgICAgICAgICAgICAgICAodGhpcy5pbmRleCh0aGlzLl9maXJzdCkgPiAwKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnRhaWwgJiYgdGhpcy5pblRhaWwpKSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGNsaXBwaW5nOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRbJ2lubmVyJyArICh0aGlzLnZlcnRpY2FsID8gJ0hlaWdodCcgOiAnV2lkdGgnKV0oKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRpbWVuc2lvbjogZnVuY3Rpb24oZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudFsnb3V0ZXInICsgKHRoaXMudmVydGljYWwgPyAnSGVpZ2h0JyA6ICdXaWR0aCcpXSh0cnVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNjcm9sbDogZnVuY3Rpb24odGFyZ2V0LCBhbmltYXRlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5hbmltYXRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZmFsc2UgPT09IHRoaXMuX3RyaWdnZXIoJ3Njcm9sbCcsIG51bGwsIFt0YXJnZXQsIGFuaW1hdGVdKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24oYW5pbWF0ZSkpIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrID0gYW5pbWF0ZTtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGUgID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHBhcnNlZCA9ICQuakNhcm91c2VsLnBhcnNlVGFyZ2V0KHRhcmdldCk7XHJcblxyXG4gICAgICAgICAgICBpZiAocGFyc2VkLnJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW5kICAgID0gdGhpcy5pdGVtcygpLmxlbmd0aCAtIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgc2Nyb2xsID0gTWF0aC5hYnMocGFyc2VkLnRhcmdldCksXHJcbiAgICAgICAgICAgICAgICAgICAgd3JhcCAgID0gdGhpcy5vcHRpb25zKCd3cmFwJyksXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudCxcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdCxcclxuICAgICAgICAgICAgICAgICAgICBpbmRleCxcclxuICAgICAgICAgICAgICAgICAgICBzdGFydCxcclxuICAgICAgICAgICAgICAgICAgICBjdXJyLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzVmlzaWJsZSxcclxuICAgICAgICAgICAgICAgICAgICBwcm9wcyxcclxuICAgICAgICAgICAgICAgICAgICBpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChwYXJzZWQudGFyZ2V0ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0ID0gdGhpcy5pbmRleCh0aGlzLl9sYXN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxhc3QgPj0gZW5kICYmIHRoaXMudGFpbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW5UYWlsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxUYWlsKGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3cmFwID09PSAnYm90aCcgfHwgd3JhcCA9PT0gJ2xhc3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsKDAsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHRoaXMuaW5kZXgodGhpcy5fdGFyZ2V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgodGhpcy51bmRlcmZsb3cgJiYgY3VycmVudCA9PT0gZW5kICYmICh3cmFwID09PSAnY2lyY3VsYXInIHx8IHdyYXAgPT09ICdib3RoJyB8fCB3cmFwID09PSAnbGFzdCcpKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKCF0aGlzLnVuZGVyZmxvdyAmJiBsYXN0ID09PSBlbmQgJiYgKHdyYXAgPT09ICdib3RoJyB8fCB3cmFwID09PSAnbGFzdCcpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2Nyb2xsKDAsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gY3VycmVudCArIHNjcm9sbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaXJjdWxhciAmJiBpbmRleCA+IGVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBlbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IHRoaXMuaXRlbXMoKS5nZXQoLTEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaSsrIDwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IHRoaXMuaXRlbXMoKS5lcSgwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWaXNpYmxlID0gdGhpcy5fdmlzaWJsZS5pbmRleChjdXJyKSA+PSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyci5hZnRlcihjdXJyLmNsb25lKHRydWUpLmF0dHIoJ2RhdGEtamNhcm91c2VsLWNsb25lJywgdHJ1ZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3QoKS5hcHBlbmQoY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzW3RoaXMubHRdID0gdGhpcy5kaW1lbnNpb24oY3Vycik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vdmVCeShwcm9wcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcmNlIGl0ZW1zIHJlbG9hZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwoY3VyciwgYW5pbWF0ZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwoTWF0aC5taW4oaW5kZXgsIGVuZCksIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5UYWlsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Njcm9sbChNYXRoLm1heCgodGhpcy5pbmRleCh0aGlzLl9maXJzdCkgLSBzY3JvbGwpICsgMSwgMCksIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdCAgPSB0aGlzLmluZGV4KHRoaXMuX2ZpcnN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudCA9IHRoaXMuaW5kZXgodGhpcy5fdGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgID0gdGhpcy51bmRlcmZsb3cgPyBjdXJyZW50IDogZmlyc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ICA9IHN0YXJ0IC0gc2Nyb2xsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXJ0IDw9IDAgJiYgKCh0aGlzLnVuZGVyZmxvdyAmJiB3cmFwID09PSAnY2lyY3VsYXInKSB8fCB3cmFwID09PSAnYm90aCcgfHwgd3JhcCA9PT0gJ2ZpcnN0JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Njcm9sbChlbmQsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNpcmN1bGFyICYmIGluZGV4IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgICAgPSBpbmRleDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gdGhpcy5pdGVtcygpLmdldCgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkrKyA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VyciA9IHRoaXMuaXRlbXMoKS5lcSgtMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmlzaWJsZSA9IHRoaXMuX3Zpc2libGUuaW5kZXgoY3VycikgPj0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIuYWZ0ZXIoY3Vyci5jbG9uZSh0cnVlKS5hdHRyKCdkYXRhLWpjYXJvdXNlbC1jbG9uZScsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0KCkucHJlcGVuZChjdXJyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEZvcmNlIGl0ZW1zIHJlbG9hZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pdGVtcyA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGltID0gdGhpcy5kaW1lbnNpb24oY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wc1t0aGlzLmx0XSA9IC1kaW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUJ5KHByb3BzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwoY3VyciwgYW5pbWF0ZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwoTWF0aC5tYXgoaW5kZXgsIDApLCBhbmltYXRlLCBjYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGwocGFyc2VkLnRhcmdldCwgYW5pbWF0ZSwgY2FsbGJhY2spO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLl90cmlnZ2VyKCdzY3JvbGxlbmQnKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW92ZUJ5OiBmdW5jdGlvbihwcm9wZXJ0aWVzLCBvcHRzKSB7XHJcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMubGlzdCgpLnBvc2l0aW9uKCksXHJcbiAgICAgICAgICAgICAgICBtdWx0aXBsaWVyID0gMSxcclxuICAgICAgICAgICAgICAgIGNvcnJlY3Rpb24gPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucnRsICYmICF0aGlzLnZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBtdWx0aXBsaWVyID0gLTE7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb3JyZWN0aW9uID0gdGhpcy5saXN0KCkud2lkdGgoKSAtIHRoaXMuY2xpcHBpbmcoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMubGVmdCkge1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5sZWZ0ID0gKHBvc2l0aW9uLmxlZnQgKyBjb3JyZWN0aW9uICsgdG9GbG9hdChwcm9wZXJ0aWVzLmxlZnQpICogbXVsdGlwbGllcikgKyAncHgnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocHJvcGVydGllcy50b3ApIHtcclxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMudG9wID0gKHBvc2l0aW9uLnRvcCArIGNvcnJlY3Rpb24gKyB0b0Zsb2F0KHByb3BlcnRpZXMudG9wKSAqIG11bHRpcGxpZXIpICsgJ3B4JztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW92ZShwcm9wZXJ0aWVzLCBvcHRzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG1vdmU6IGZ1bmN0aW9uKHByb3BlcnRpZXMsIG9wdHMpIHtcclxuICAgICAgICAgICAgb3B0cyA9IG9wdHMgfHwge307XHJcblxyXG4gICAgICAgICAgICB2YXIgb3B0aW9uICAgICAgID0gdGhpcy5vcHRpb25zKCd0cmFuc2l0aW9ucycpLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNpdGlvbnMgID0gISFvcHRpb24sXHJcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zICAgPSAhIW9wdGlvbi50cmFuc2Zvcm1zLFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtczNkID0gISFvcHRpb24udHJhbnNmb3JtczNkLFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gICAgID0gb3B0cy5kdXJhdGlvbiB8fCAwLFxyXG4gICAgICAgICAgICAgICAgbGlzdCAgICAgICAgID0gdGhpcy5saXN0KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRyYW5zaXRpb25zICYmIGR1cmF0aW9uID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbGlzdC5hbmltYXRlKHByb3BlcnRpZXMsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgY29tcGxldGUgPSBvcHRzLmNvbXBsZXRlIHx8ICQubm9vcCxcclxuICAgICAgICAgICAgICAgIGNzcyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYmFja3VwID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IGxpc3QuY3NzKCd0cmFuc2l0aW9uRHVyYXRpb24nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOiBsaXN0LmNzcygndHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25Qcm9wZXJ0eTogbGlzdC5jc3MoJ3RyYW5zaXRpb25Qcm9wZXJ0eScpXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvbGRDb21wbGV0ZSA9IGNvbXBsZXRlO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jc3MoYmFja3VwKTtcclxuICAgICAgICAgICAgICAgICAgICBvbGRDb21wbGV0ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGNzcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uRHVyYXRpb246IChkdXJhdGlvbiA+IDAgPyBkdXJhdGlvbiAvIDEwMDAgOiAwKSArICdzJyxcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb246IG9wdGlvbi5lYXNpbmcgfHwgb3B0cy5lYXNpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvblByb3BlcnR5OiBkdXJhdGlvbiA+IDAgPyAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1zIHx8IHRyYW5zZm9ybXMzZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byB1c2UgJ2FsbCcgYmVjYXVzZSBqUXVlcnkgZG9lc24ndCBwcmVmaXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNzcyB2YWx1ZXMsIGxpa2UgdHJhbnNpdGlvbi1wcm9wZXJ0eTogdHJhbnNmb3JtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdhbGwnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJvcGVydGllcy5sZWZ0ID8gJ2xlZnQnIDogJ3RvcCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkoKSA6ICdub25lJyxcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06ICdub25lJ1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRyYW5zZm9ybXMzZCkge1xyXG4gICAgICAgICAgICAgICAgY3NzLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgnICsgKHByb3BlcnRpZXMubGVmdCB8fCAwKSArICcsJyArIChwcm9wZXJ0aWVzLnRvcCB8fCAwKSArICcsMCknO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRyYW5zZm9ybXMpIHtcclxuICAgICAgICAgICAgICAgIGNzcy50cmFuc2Zvcm0gPSAndHJhbnNsYXRlKCcgKyAocHJvcGVydGllcy5sZWZ0IHx8IDApICsgJywnICsgKHByb3BlcnRpZXMudG9wIHx8IDApICsgJyknO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJC5leHRlbmQoY3NzLCBwcm9wZXJ0aWVzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRyYW5zaXRpb25zICYmIGR1cmF0aW9uID4gMCkge1xyXG4gICAgICAgICAgICAgICAgbGlzdC5vbmUoJ3RyYW5zaXRpb25lbmQgd2Via2l0VHJhbnNpdGlvbkVuZCBvVHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZCBNU1RyYW5zaXRpb25FbmQnLCBjb21wbGV0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxpc3QuY3NzKGNzcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZHVyYXRpb24gPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgbGlzdC5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX3Njcm9sbDogZnVuY3Rpb24oaXRlbSwgYW5pbWF0ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW5nKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0gIT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtID0gdGhpcy5pdGVtcygpLmVxKGl0ZW0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtLmpxdWVyeSA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0gPSAkKGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaXRlbS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuaW5UYWlsID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wcmVwYXJlKGl0ZW0pO1xyXG5cclxuICAgICAgICAgICAgdmFyIHBvcyAgICAgPSB0aGlzLl9wb3NpdGlvbihpdGVtKSxcclxuICAgICAgICAgICAgICAgIGN1cnJQb3MgPSB0aGlzLmxpc3QoKS5wb3NpdGlvbigpW3RoaXMubHRdO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBvcyA9PT0gY3VyclBvcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICAgICAgcHJvcGVydGllc1t0aGlzLmx0XSA9IHBvcyArICdweCc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9hbmltYXRlKHByb3BlcnRpZXMsIGFuaW1hdGUsIGNhbGxiYWNrKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX3Njcm9sbFRhaWw6IGZ1bmN0aW9uKGFuaW1hdGUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmFuaW1hdGluZyB8fCAhdGhpcy50YWlsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB2YXIgcG9zID0gdGhpcy5saXN0KCkucG9zaXRpb24oKVt0aGlzLmx0XTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJ0bCAmJiB0aGlzLnJlbGF0aXZlICYmICF0aGlzLnZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBwb3MgKz0gdGhpcy5saXN0KCkud2lkdGgoKSAtIHRoaXMuY2xpcHBpbmcoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucnRsICYmICF0aGlzLnZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBwb3MgKz0gdGhpcy50YWlsO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcG9zIC09IHRoaXMudGFpbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5pblRhaWwgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSB7fTtcclxuICAgICAgICAgICAgcHJvcGVydGllc1t0aGlzLmx0XSA9IHBvcyArICdweCc7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoe1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0OiAgICAgICB0aGlzLl90YXJnZXQubmV4dCgpLFxyXG4gICAgICAgICAgICAgICAgZnVsbHl2aXNpYmxlOiB0aGlzLl9mdWxseXZpc2libGUuc2xpY2UoMSkuYWRkKHRoaXMuX3Zpc2libGUubGFzdCgpKVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2FuaW1hdGUocHJvcGVydGllcywgYW5pbWF0ZSwgY2FsbGJhY2spO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfYW5pbWF0ZTogZnVuY3Rpb24ocHJvcGVydGllcywgYW5pbWF0ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayB8fCAkLm5vb3A7XHJcblxyXG4gICAgICAgICAgICBpZiAoZmFsc2UgPT09IHRoaXMuX3RyaWdnZXIoJ2FuaW1hdGUnKSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5hbmltYXRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdmFyIGFuaW1hdGlvbiA9IHRoaXMub3B0aW9ucygnYW5pbWF0aW9uJyksXHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSAgPSAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjID0gdGhpcy5saXN0KCkuZmluZCgnW2RhdGEtamNhcm91c2VsLWNsb25lXScpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGMucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJpZ2dlcignYW5pbWF0ZWVuZCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgb3B0cyA9IHR5cGVvZiBhbmltYXRpb24gPT09ICdvYmplY3QnID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5leHRlbmQoe30sIGFuaW1hdGlvbikgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB7ZHVyYXRpb246IGFuaW1hdGlvbn0sXHJcbiAgICAgICAgICAgICAgICBvbGRDb21wbGV0ZSA9IG9wdHMuY29tcGxldGUgfHwgJC5ub29wO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFuaW1hdGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRzLmR1cmF0aW9uID0gMDtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgJC5meC5zcGVlZHNbb3B0cy5kdXJhdGlvbl0gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRzLmR1cmF0aW9uID0gJC5meC5zcGVlZHNbb3B0cy5kdXJhdGlvbl07XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9wdHMuY29tcGxldGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICBvbGRDb21wbGV0ZS5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdGhpcy5tb3ZlKHByb3BlcnRpZXMsIG9wdHMpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfcHJlcGFyZTogZnVuY3Rpb24oaXRlbSkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggID0gdGhpcy5pbmRleChpdGVtKSxcclxuICAgICAgICAgICAgICAgIGlkeCAgICA9IGluZGV4LFxyXG4gICAgICAgICAgICAgICAgd2ggICAgID0gdGhpcy5kaW1lbnNpb24oaXRlbSksXHJcbiAgICAgICAgICAgICAgICBjbGlwICAgPSB0aGlzLmNsaXBwaW5nKCksXHJcbiAgICAgICAgICAgICAgICBscmIgICAgPSB0aGlzLnZlcnRpY2FsID8gJ2JvdHRvbScgOiAodGhpcy5ydGwgPyAnbGVmdCcgIDogJ3JpZ2h0JyksXHJcbiAgICAgICAgICAgICAgICBjZW50ZXIgPSB0aGlzLm9wdGlvbnMoJ2NlbnRlcicpLFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogICAgICAgaXRlbSxcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdDogICAgICAgIGl0ZW0sXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdDogICAgICAgICBpdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6ICAgICAgaXRlbSxcclxuICAgICAgICAgICAgICAgICAgICBmdWxseXZpc2libGU6IHdoIDw9IGNsaXAgPyBpdGVtIDogJCgpXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgY3VycixcclxuICAgICAgICAgICAgICAgIGlzVmlzaWJsZSxcclxuICAgICAgICAgICAgICAgIG1hcmdpbixcclxuICAgICAgICAgICAgICAgIGRpbTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjZW50ZXIpIHtcclxuICAgICAgICAgICAgICAgIHdoIC89IDI7XHJcbiAgICAgICAgICAgICAgICBjbGlwIC89IDI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh3aCA8IGNsaXApIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3VyciA9IHRoaXMuaXRlbXMoKS5lcSgrK2lkeCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2lyY3VsYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyID0gdGhpcy5pdGVtcygpLmVxKDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uZ2V0KDApID09PSBjdXJyLmdldCgwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVmlzaWJsZSA9IHRoaXMuX3Zpc2libGUuaW5kZXgoY3VycikgPj0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnIuYWZ0ZXIoY3Vyci5jbG9uZSh0cnVlKS5hdHRyKCdkYXRhLWpjYXJvdXNlbC1jbG9uZScsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0KCkuYXBwZW5kKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcHNbdGhpcy5sdF0gPSB0aGlzLmRpbWVuc2lvbihjdXJyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZUJ5KHByb3BzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRm9yY2UgaXRlbXMgcmVsb2FkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1zID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRpbSA9IHRoaXMuZGltZW5zaW9uKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGltID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2ggKz0gZGltO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGUubGFzdCAgICA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlLnZpc2libGUgPSB1cGRhdGUudmlzaWJsZS5hZGQoY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSByaWdodC9ib3R0b20gbWFyZ2luIGZyb20gdG90YWwgd2lkdGhcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4gPSB0b0Zsb2F0KGN1cnIuY3NzKCdtYXJnaW4tJyArIGxyYikpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHdoIC0gbWFyZ2luKSA8PSBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZS5mdWxseXZpc2libGUgPSB1cGRhdGUuZnVsbHl2aXNpYmxlLmFkZChjdXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aCA+PSBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNpcmN1bGFyICYmICFjZW50ZXIgJiYgd2ggPCBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICBpZHggPSBpbmRleDtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgtLWlkeCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjdXJyID0gdGhpcy5pdGVtcygpLmVxKGlkeCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGRpbSA9IHRoaXMuZGltZW5zaW9uKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGltID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgd2ggKz0gZGltO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGUuZmlyc3QgICA9IGN1cnI7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlLnZpc2libGUgPSB1cGRhdGUudmlzaWJsZS5hZGQoY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSByaWdodC9ib3R0b20gbWFyZ2luIGZyb20gdG90YWwgd2lkdGhcclxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4gPSB0b0Zsb2F0KGN1cnIuY3NzKCdtYXJnaW4tJyArIGxyYikpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHdoIC0gbWFyZ2luKSA8PSBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZS5mdWxseXZpc2libGUgPSB1cGRhdGUuZnVsbHl2aXNpYmxlLmFkZChjdXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aCA+PSBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKHVwZGF0ZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnRhaWwgPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjZW50ZXIgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucygnd3JhcCcpICE9PSAnY2lyY3VsYXInICYmXHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMoJ3dyYXAnKSAhPT0gJ2N1c3RvbScgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5kZXgodXBkYXRlLmxhc3QpID09PSAodGhpcy5pdGVtcygpLmxlbmd0aCAtIDEpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHJpZ2h0L2JvdHRvbSBtYXJnaW4gZnJvbSB0b3RhbCB3aWR0aFxyXG4gICAgICAgICAgICAgICAgd2ggLT0gdG9GbG9hdCh1cGRhdGUubGFzdC5jc3MoJ21hcmdpbi0nICsgbHJiKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHdoID4gY2xpcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGFpbCA9IHdoIC0gY2xpcDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfcG9zaXRpb246IGZ1bmN0aW9uKGl0ZW0pIHtcclxuICAgICAgICAgICAgdmFyIGZpcnN0ICA9IHRoaXMuX2ZpcnN0LFxyXG4gICAgICAgICAgICAgICAgcG9zICAgID0gZmlyc3QucG9zaXRpb24oKVt0aGlzLmx0XSxcclxuICAgICAgICAgICAgICAgIGNlbnRlciA9IHRoaXMub3B0aW9ucygnY2VudGVyJyksXHJcbiAgICAgICAgICAgICAgICBjZW50ZXJPZmZzZXQgPSBjZW50ZXIgPyAodGhpcy5jbGlwcGluZygpIC8gMikgLSAodGhpcy5kaW1lbnNpb24oZmlyc3QpIC8gMikgOiAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMucnRsICYmICF0aGlzLnZlcnRpY2FsKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcyAtPSB0aGlzLmxpc3QoKS53aWR0aCgpIC0gdGhpcy5kaW1lbnNpb24oZmlyc3QpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwb3MgLT0gdGhpcy5jbGlwcGluZygpIC0gdGhpcy5kaW1lbnNpb24oZmlyc3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHBvcyArPSBjZW50ZXJPZmZzZXQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBwb3MgLT0gY2VudGVyT2Zmc2V0O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIWNlbnRlciAmJlxyXG4gICAgICAgICAgICAgICAgKHRoaXMuaW5kZXgoaXRlbSkgPiB0aGlzLmluZGV4KGZpcnN0KSB8fCB0aGlzLmluVGFpbCkgJiZcclxuICAgICAgICAgICAgICAgIHRoaXMudGFpbCkge1xyXG4gICAgICAgICAgICAgICAgcG9zID0gdGhpcy5ydGwgJiYgIXRoaXMudmVydGljYWwgPyBwb3MgLSB0aGlzLnRhaWwgOiBwb3MgKyB0aGlzLnRhaWw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluVGFpbCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluVGFpbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gLXBvcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIF91cGRhdGU6IGZ1bmN0aW9uKHVwZGF0ZSkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogICAgICAgdGhpcy5fdGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgICAgIGZpcnN0OiAgICAgICAgdGhpcy5fZmlyc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdDogICAgICAgICB0aGlzLl9sYXN0LFxyXG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6ICAgICAgdGhpcy5fdmlzaWJsZSxcclxuICAgICAgICAgICAgICAgICAgICBmdWxseXZpc2libGU6IHRoaXMuX2Z1bGx5dmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGJhY2sgPSB0aGlzLmluZGV4KHVwZGF0ZS5maXJzdCB8fCBjdXJyZW50LmZpcnN0KSA8IHRoaXMuaW5kZXgoY3VycmVudC5maXJzdCksXHJcbiAgICAgICAgICAgICAgICBrZXksXHJcbiAgICAgICAgICAgICAgICBkb1VwZGF0ZSA9IGZ1bmN0aW9uKGtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbEluICA9IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbE91dCA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVba2V5XS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFtrZXldLmluZGV4KHRoaXMpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxJbi5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRba2V5XS5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXBkYXRlW2tleV0uaW5kZXgodGhpcykgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbE91dC5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsSW4gPSBlbEluLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbE91dCA9IGVsT3V0LnJldmVyc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuX3RyaWdnZXIoa2V5ICsgJ2luJywgJChlbEluKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5fdHJpZ2dlcihrZXkgKyAnb3V0JywgJChlbE91dCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzZWxmWydfJyArIGtleV0gPSB1cGRhdGVba2V5XTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBmb3IgKGtleSBpbiB1cGRhdGUpIHtcclxuICAgICAgICAgICAgICAgIGRvVXBkYXRlKGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KGpRdWVyeSwgd2luZG93KSk7XHJcblxyXG4oZnVuY3Rpb24oJCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgICQuamNhcm91c2VsLmZuLnNjcm9sbEludG9WaWV3ID0gZnVuY3Rpb24odGFyZ2V0LCBhbmltYXRlLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBwYXJzZWQgPSAkLmpDYXJvdXNlbC5wYXJzZVRhcmdldCh0YXJnZXQpLFxyXG4gICAgICAgICAgICBmaXJzdCAgPSB0aGlzLmluZGV4KHRoaXMuX2Z1bGx5dmlzaWJsZS5maXJzdCgpKSxcclxuICAgICAgICAgICAgbGFzdCAgID0gdGhpcy5pbmRleCh0aGlzLl9mdWxseXZpc2libGUubGFzdCgpKSxcclxuICAgICAgICAgICAgaW5kZXg7XHJcblxyXG4gICAgICAgIGlmIChwYXJzZWQucmVsYXRpdmUpIHtcclxuICAgICAgICAgICAgaW5kZXggPSBwYXJzZWQudGFyZ2V0IDwgMCA/IE1hdGgubWF4KDAsIGZpcnN0ICsgcGFyc2VkLnRhcmdldCkgOiBsYXN0ICsgcGFyc2VkLnRhcmdldDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpbmRleCA9IHR5cGVvZiBwYXJzZWQudGFyZ2V0ICE9PSAnb2JqZWN0JyA/IHBhcnNlZC50YXJnZXQgOiB0aGlzLmluZGV4KHBhcnNlZC50YXJnZXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGluZGV4IDwgZmlyc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsKGluZGV4LCBhbmltYXRlLCBjYWxsYmFjayk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaW5kZXggPj0gZmlyc3QgJiYgaW5kZXggPD0gbGFzdCkge1xyXG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKGNhbGxiYWNrKSkge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGl0ZW1zID0gdGhpcy5pdGVtcygpLFxyXG4gICAgICAgICAgICBjbGlwID0gdGhpcy5jbGlwcGluZygpLFxyXG4gICAgICAgICAgICBscmIgID0gdGhpcy52ZXJ0aWNhbCA/ICdib3R0b20nIDogKHRoaXMucnRsID8gJ2xlZnQnICA6ICdyaWdodCcpLFxyXG4gICAgICAgICAgICB3aCAgID0gMCxcclxuICAgICAgICAgICAgY3VycjtcclxuXHJcbiAgICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICAgICAgY3VyciA9IGl0ZW1zLmVxKGluZGV4KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChjdXJyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHdoICs9IHRoaXMuZGltZW5zaW9uKGN1cnIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHdoID49IGNsaXApIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXJnaW4gPSBwYXJzZUZsb2F0KGN1cnIuY3NzKCdtYXJnaW4tJyArIGxyYikpIHx8IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHdoIC0gbWFyZ2luKSAhPT0gY2xpcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGluZGV4IDw9IDApIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbmRleC0tO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2Nyb2xsKGluZGV4LCBhbmltYXRlLCBjYWxsYmFjayk7XHJcbiAgICB9O1xyXG59KGpRdWVyeSkpO1xyXG5cclxuKGZ1bmN0aW9uKCQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAkLmpDYXJvdXNlbC5wbHVnaW4oJ2pjYXJvdXNlbENvbnRyb2wnLCB7XHJcbiAgICAgICAgX29wdGlvbnM6IHtcclxuICAgICAgICAgICAgdGFyZ2V0OiAnKz0xJyxcclxuICAgICAgICAgICAgZXZlbnQ6ICAnY2xpY2snLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdzY3JvbGwnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBfYWN0aXZlOiBudWxsLFxyXG4gICAgICAgIF9pbml0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkRlc3Ryb3kgPSAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uZSgnamNhcm91c2VsOmNyZWF0ZWVuZCcsICQucHJveHkodGhpcy5fY3JlYXRlLCB0aGlzKSk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLm9uUmVsb2FkID0gJC5wcm94eSh0aGlzLl9yZWxvYWQsIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLm9uRXZlbnQgPSAkLnByb3h5KGZ1bmN0aW9uKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgbWV0aG9kID0gdGhpcy5vcHRpb25zKCdtZXRob2QnKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG1ldGhvZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2QuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC5qY2Fyb3VzZWwodGhpcy5vcHRpb25zKCdtZXRob2QnKSwgdGhpcy5vcHRpb25zKCd0YXJnZXQnKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2NyZWF0ZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWwoKVxyXG4gICAgICAgICAgICAgICAgLm9uZSgnamNhcm91c2VsOmRlc3Ryb3knLCB0aGlzLm9uRGVzdHJveSlcclxuICAgICAgICAgICAgICAgIC5vbignamNhcm91c2VsOnJlbG9hZGVuZCBqY2Fyb3VzZWw6c2Nyb2xsZW5kJywgdGhpcy5vblJlbG9hZCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgICAgICAgICAgICAub24odGhpcy5vcHRpb25zKCdldmVudCcpICsgJy5qY2Fyb3VzZWxjb250cm9sJywgdGhpcy5vbkV2ZW50KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX3JlbG9hZCgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX2Rlc3Ryb3k6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50XHJcbiAgICAgICAgICAgICAgICAub2ZmKCcuamNhcm91c2VsY29udHJvbCcsIHRoaXMub25FdmVudCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhcm91c2VsKClcclxuICAgICAgICAgICAgICAgIC5vZmYoJ2pjYXJvdXNlbDpkZXN0cm95JywgdGhpcy5vbkRlc3Ryb3kpXHJcbiAgICAgICAgICAgICAgICAub2ZmKCdqY2Fyb3VzZWw6cmVsb2FkZW5kIGpjYXJvdXNlbDpzY3JvbGxlbmQnLCB0aGlzLm9uUmVsb2FkKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9yZWxvYWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgcGFyc2VkICAgPSAkLmpDYXJvdXNlbC5wYXJzZVRhcmdldCh0aGlzLm9wdGlvbnMoJ3RhcmdldCcpKSxcclxuICAgICAgICAgICAgICAgIGNhcm91c2VsID0gdGhpcy5jYXJvdXNlbCgpLFxyXG4gICAgICAgICAgICAgICAgYWN0aXZlO1xyXG5cclxuICAgICAgICAgICAgaWYgKHBhcnNlZC5yZWxhdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlID0gY2Fyb3VzZWxcclxuICAgICAgICAgICAgICAgICAgICAuamNhcm91c2VsKHBhcnNlZC50YXJnZXQgPiAwID8gJ2hhc05leHQnIDogJ2hhc1ByZXYnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSB0eXBlb2YgcGFyc2VkLnRhcmdldCAhPT0gJ29iamVjdCcgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcm91c2VsLmpjYXJvdXNlbCgnaXRlbXMnKS5lcShwYXJzZWQudGFyZ2V0KSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2VkLnRhcmdldDtcclxuXHJcbiAgICAgICAgICAgICAgICBhY3RpdmUgPSBjYXJvdXNlbC5qY2Fyb3VzZWwoJ3RhcmdldCcpLmluZGV4KHRhcmdldCkgPj0gMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2FjdGl2ZSAhPT0gYWN0aXZlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cmlnZ2VyKGFjdGl2ZSA/ICdhY3RpdmUnIDogJ2luYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmUgPSBhY3RpdmU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KGpRdWVyeSkpO1xyXG5cclxuKGZ1bmN0aW9uKCQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAkLmpDYXJvdXNlbC5wbHVnaW4oJ2pjYXJvdXNlbFBhZ2luYXRpb24nLCB7XHJcbiAgICAgICAgX29wdGlvbnM6IHtcclxuICAgICAgICAgICAgcGVyUGFnZTogbnVsbCxcclxuICAgICAgICAgICAgaXRlbTogZnVuY3Rpb24ocGFnZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICc8YSBocmVmPVwiIycgKyBwYWdlICsgJ1wiPicgKyBwYWdlICsgJzwvYT4nO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBldmVudDogICdjbGljaycsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Njcm9sbCdcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9jYXJvdXNlbEl0ZW1zOiBudWxsLFxyXG4gICAgICAgIF9wYWdlczoge30sXHJcbiAgICAgICAgX2l0ZW1zOiB7fSxcclxuICAgICAgICBfY3VycmVudFBhZ2U6IG51bGwsXHJcbiAgICAgICAgX2luaXQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLm9uRGVzdHJveSA9ICQucHJveHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcm91c2VsKClcclxuICAgICAgICAgICAgICAgICAgICAub25lKCdqY2Fyb3VzZWw6Y3JlYXRlZW5kJywgJC5wcm94eSh0aGlzLl9jcmVhdGUsIHRoaXMpKTtcclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMub25SZWxvYWQgPSAkLnByb3h5KHRoaXMuX3JlbG9hZCwgdGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMub25TY3JvbGwgPSAkLnByb3h5KHRoaXMuX3VwZGF0ZSwgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfY3JlYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAub25lKCdqY2Fyb3VzZWw6ZGVzdHJveScsIHRoaXMub25EZXN0cm95KVxyXG4gICAgICAgICAgICAgICAgLm9uKCdqY2Fyb3VzZWw6cmVsb2FkZW5kJywgdGhpcy5vblJlbG9hZClcclxuICAgICAgICAgICAgICAgIC5vbignamNhcm91c2VsOnNjcm9sbGVuZCcsIHRoaXMub25TY3JvbGwpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fcmVsb2FkKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfZGVzdHJveTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NsZWFyKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhcm91c2VsKClcclxuICAgICAgICAgICAgICAgIC5vZmYoJ2pjYXJvdXNlbDpkZXN0cm95JywgdGhpcy5vbkRlc3Ryb3kpXHJcbiAgICAgICAgICAgICAgICAub2ZmKCdqY2Fyb3VzZWw6cmVsb2FkZW5kJywgdGhpcy5vblJlbG9hZClcclxuICAgICAgICAgICAgICAgIC5vZmYoJ2pjYXJvdXNlbDpzY3JvbGxlbmQnLCB0aGlzLm9uU2Nyb2xsKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2Nhcm91c2VsSXRlbXMgPSBudWxsO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgX3JlbG9hZDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBwZXJQYWdlID0gdGhpcy5vcHRpb25zKCdwZXJQYWdlJyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9wYWdlcyA9IHt9O1xyXG4gICAgICAgICAgICB0aGlzLl9pdGVtcyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHBhZ2VzXHJcbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ocGVyUGFnZSkpIHtcclxuICAgICAgICAgICAgICAgIHBlclBhZ2UgPSBwZXJQYWdlLmNhbGwodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwZXJQYWdlID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BhZ2VzID0gdGhpcy5fY2FsY3VsYXRlUGFnZXMoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciBwcCAgICA9IHBhcnNlSW50KHBlclBhZ2UsIDEwKSB8fCAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zID0gdGhpcy5fZ2V0Q2Fyb3VzZWxJdGVtcygpLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2UgID0gMSxcclxuICAgICAgICAgICAgICAgICAgICBpICAgICA9IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycjtcclxuXHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnIgPSBpdGVtcy5lcShpKyspO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3Vyci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3BhZ2VzW3BhZ2VdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3BhZ2VzW3BhZ2VdID0gY3VycjtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYWdlc1twYWdlXSA9IHRoaXMuX3BhZ2VzW3BhZ2VdLmFkZChjdXJyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpICUgcHAgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5fY2xlYXIoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciBzZWxmICAgICA9IHRoaXMsXHJcbiAgICAgICAgICAgICAgICBjYXJvdXNlbCA9IHRoaXMuY2Fyb3VzZWwoKS5kYXRhKCdqY2Fyb3VzZWwnKSxcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQgID0gdGhpcy5fZWxlbWVudCxcclxuICAgICAgICAgICAgICAgIGl0ZW0gICAgID0gdGhpcy5vcHRpb25zKCdpdGVtJyksXHJcbiAgICAgICAgICAgICAgICBudW1DYXJvdXNlbEl0ZW1zID0gdGhpcy5fZ2V0Q2Fyb3VzZWxJdGVtcygpLmxlbmd0aDtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLl9wYWdlcywgZnVuY3Rpb24ocGFnZSwgY2Fyb3VzZWxJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJJdGVtID0gc2VsZi5faXRlbXNbcGFnZV0gPSAkKGl0ZW0uY2FsbChzZWxmLCBwYWdlLCBjYXJvdXNlbEl0ZW1zKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY3Vyckl0ZW0ub24oc2VsZi5vcHRpb25zKCdldmVudCcpICsgJy5qY2Fyb3VzZWxwYWdpbmF0aW9uJywgJC5wcm94eShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gY2Fyb3VzZWxJdGVtcy5lcSgwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgY2lyY3VsYXIgd3JhcHBpbmcgZW5hYmxlZCwgZW5zdXJlIGNvcnJlY3Qgc2Nyb2xsaW5nIGRpcmVjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXJvdXNlbC5jaXJjdWxhcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gY2Fyb3VzZWwuaW5kZXgoY2Fyb3VzZWwudGFyZ2V0KCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SW5kZXggICAgID0gY2Fyb3VzZWwuaW5kZXgodGFyZ2V0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUZsb2F0KHBhZ2UpID4gcGFyc2VGbG9hdChzZWxmLl9jdXJyZW50UGFnZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleCA8IGN1cnJlbnRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA9ICcrPScgKyAobnVtQ2Fyb3VzZWxJdGVtcyAtIGN1cnJlbnRJbmRleCArIG5ld0luZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdJbmRleCA+IGN1cnJlbnRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA9ICctPScgKyAoY3VycmVudEluZGV4ICsgKG51bUNhcm91c2VsSXRlbXMgLSBuZXdJbmRleCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBjYXJvdXNlbFt0aGlzLm9wdGlvbnMoJ21ldGhvZCcpXSh0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgfSwgc2VsZikpO1xyXG5cclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kKGN1cnJJdGVtKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF91cGRhdGU6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gdGhpcy5jYXJvdXNlbCgpLmpjYXJvdXNlbCgndGFyZ2V0JyksXHJcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZTtcclxuXHJcbiAgICAgICAgICAgICQuZWFjaCh0aGlzLl9wYWdlcywgZnVuY3Rpb24ocGFnZSwgY2Fyb3VzZWxJdGVtcykge1xyXG4gICAgICAgICAgICAgICAgY2Fyb3VzZWxJdGVtcy5lYWNoKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuaXModGhpcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBhZ2UgPSBwYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRQYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jdXJyZW50UGFnZSAhPT0gY3VycmVudFBhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2luYWN0aXZlJywgdGhpcy5faXRlbXNbdGhpcy5fY3VycmVudFBhZ2VdKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RyaWdnZXIoJ2FjdGl2ZScsIHRoaXMuX2l0ZW1zW2N1cnJlbnRQYWdlXSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRQYWdlID0gY3VycmVudFBhZ2U7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpdGVtczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9pdGVtcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlbG9hZENhcm91c2VsSXRlbXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9jYXJvdXNlbEl0ZW1zID0gbnVsbDtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfY2xlYXI6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50LmVtcHR5KCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRQYWdlID0gbnVsbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9jYWxjdWxhdGVQYWdlczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHZhciBjYXJvdXNlbCA9IHRoaXMuY2Fyb3VzZWwoKS5kYXRhKCdqY2Fyb3VzZWwnKSxcclxuICAgICAgICAgICAgICAgIGl0ZW1zICAgID0gdGhpcy5fZ2V0Q2Fyb3VzZWxJdGVtcygpLFxyXG4gICAgICAgICAgICAgICAgY2xpcCAgICAgPSBjYXJvdXNlbC5jbGlwcGluZygpLFxyXG4gICAgICAgICAgICAgICAgd2ggICAgICAgPSAwLFxyXG4gICAgICAgICAgICAgICAgaWR4ICAgICAgPSAwLFxyXG4gICAgICAgICAgICAgICAgcGFnZSAgICAgPSAxLFxyXG4gICAgICAgICAgICAgICAgcGFnZXMgICAgPSB7fSxcclxuICAgICAgICAgICAgICAgIGN1cnIsXHJcbiAgICAgICAgICAgICAgICBkaW07XHJcblxyXG4gICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY3VyciA9IGl0ZW1zLmVxKGlkeCsrKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY3Vyci5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBkaW0gPSBjYXJvdXNlbC5kaW1lbnNpb24oY3Vycik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCh3aCArIGRpbSkgPiBjbGlwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB3aCArPSBkaW07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFwYWdlc1twYWdlXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VzW3BhZ2VdID0gY3VycjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFnZXNbcGFnZV0gPSBwYWdlc1twYWdlXS5hZGQoY3Vycik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBwYWdlcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9nZXRDYXJvdXNlbEl0ZW1zOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9jYXJvdXNlbEl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYXJvdXNlbEl0ZW1zID0gdGhpcy5jYXJvdXNlbCgpLmpjYXJvdXNlbCgnaXRlbXMnKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Nhcm91c2VsSXRlbXM7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn0oalF1ZXJ5KSk7XHJcblxyXG4oZnVuY3Rpb24oJCwgZG9jdW1lbnQpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgaGlkZGVuUHJvcCxcclxuICAgICAgICB2aXNpYmlsaXR5Q2hhbmdlRXZlbnQsXHJcbiAgICAgICAgdmlzaWJpbGl0eUNoYW5nZUV2ZW50TmFtZXMgPSB7XHJcbiAgICAgICAgICAgIGhpZGRlbjogJ3Zpc2liaWxpdHljaGFuZ2UnLFxyXG4gICAgICAgICAgICBtb3pIaWRkZW46ICdtb3p2aXNpYmlsaXR5Y2hhbmdlJyxcclxuICAgICAgICAgICAgbXNIaWRkZW46ICdtc3Zpc2liaWxpdHljaGFuZ2UnLFxyXG4gICAgICAgICAgICB3ZWJraXRIaWRkZW46ICd3ZWJraXR2aXNpYmlsaXR5Y2hhbmdlJ1xyXG4gICAgICAgIH1cclxuICAgIDtcclxuXHJcbiAgICAkLmVhY2godmlzaWJpbGl0eUNoYW5nZUV2ZW50TmFtZXMsIGZ1bmN0aW9uKGtleSwgdmFsKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudFtrZXldICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICBoaWRkZW5Qcm9wID0ga2V5O1xyXG4gICAgICAgICAgICB2aXNpYmlsaXR5Q2hhbmdlRXZlbnQgPSB2YWw7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkLmpDYXJvdXNlbC5wbHVnaW4oJ2pjYXJvdXNlbEF1dG9zY3JvbGwnLCB7XHJcbiAgICAgICAgX29wdGlvbnM6IHtcclxuICAgICAgICAgICAgdGFyZ2V0OiAgICAnKz0xJyxcclxuICAgICAgICAgICAgaW50ZXJ2YWw6ICAzMDAwLFxyXG4gICAgICAgICAgICBhdXRvc3RhcnQ6IHRydWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIF90aW1lcjogbnVsbCxcclxuICAgICAgICBfc3RhcnRlZDogZmFsc2UsXHJcbiAgICAgICAgX2luaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkRlc3Ryb3kgPSAkLnByb3h5KGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAgICAgLm9uZSgnamNhcm91c2VsOmNyZWF0ZWVuZCcsICQucHJveHkodGhpcy5fY3JlYXRlLCB0aGlzKSk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbkFuaW1hdGVFbmQgPSAkLnByb3h5KHRoaXMuX3N0YXJ0LCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlID0gJC5wcm94eShmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudFtoaWRkZW5Qcm9wXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0b3AoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhcnQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfY3JlYXRlOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5jYXJvdXNlbCgpXHJcbiAgICAgICAgICAgICAgICAub25lKCdqY2Fyb3VzZWw6ZGVzdHJveScsIHRoaXMub25EZXN0cm95KTtcclxuXHJcbiAgICAgICAgICAgICQoZG9jdW1lbnQpXHJcbiAgICAgICAgICAgICAgICAub24odmlzaWJpbGl0eUNoYW5nZUV2ZW50LCB0aGlzLm9uVmlzaWJpbGl0eUNoYW5nZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zKCdhdXRvc3RhcnQnKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBfZGVzdHJveTogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0b3AoKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWwoKVxyXG4gICAgICAgICAgICAgICAgLm9mZignamNhcm91c2VsOmRlc3Ryb3knLCB0aGlzLm9uRGVzdHJveSk7XHJcblxyXG4gICAgICAgICAgICAkKGRvY3VtZW50KVxyXG4gICAgICAgICAgICAgICAgLm9mZih2aXNpYmlsaXR5Q2hhbmdlRXZlbnQsIHRoaXMub25WaXNpYmlsaXR5Q2hhbmdlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9zdGFydDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0b3AoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fc3RhcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNhcm91c2VsKClcclxuICAgICAgICAgICAgICAgIC5vbmUoJ2pjYXJvdXNlbDphbmltYXRlZW5kJywgdGhpcy5vbkFuaW1hdGVFbmQpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0KCQucHJveHkoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhcm91c2VsKCkuamNhcm91c2VsKCdzY3JvbGwnLCB0aGlzLm9wdGlvbnMoJ3RhcmdldCcpKTtcclxuICAgICAgICAgICAgfSwgdGhpcyksIHRoaXMub3B0aW9ucygnaW50ZXJ2YWwnKSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIF9zdG9wOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX3RpbWVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90aW1lciA9IGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2Fyb3VzZWwoKVxyXG4gICAgICAgICAgICAgICAgLm9mZignamNhcm91c2VsOmFuaW1hdGVlbmQnLCB0aGlzLm9uQW5pbWF0ZUVuZCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN0YXJ0OiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdGhpcy5fc3RhcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0YXJ0KCk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0aGlzLl9zdGFydGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuX3N0b3AoKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59KGpRdWVyeSwgZG9jdW1lbnQpKTtcclxuXHJcbihmdW5jdGlvbigkKSB7XHJcbiAgICAkKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICQoJy5qY2Fyb3VzZWwnKS5qY2Fyb3VzZWwoKTtcclxuXHJcbiAgICAgICAgJCgnLmpjYXJvdXNlbC1jb250cm9sLXByZXYnKVxyXG4gICAgICAgICAgICAub24oJ2pjYXJvdXNlbGNvbnRyb2w6YWN0aXZlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCdpbmFjdGl2ZScpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAub24oJ2pjYXJvdXNlbGNvbnRyb2w6aW5hY3RpdmUnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2luYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5qY2Fyb3VzZWxDb250cm9sKHtcclxuICAgICAgICAgICAgICAgIHRhcmdldDogJy09MSdcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICQoJy5qY2Fyb3VzZWwtY29udHJvbC1uZXh0JylcclxuICAgICAgICAgICAgLm9uKCdqY2Fyb3VzZWxjb250cm9sOmFjdGl2ZScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnaW5hY3RpdmUnKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLm9uKCdqY2Fyb3VzZWxjb250cm9sOmluYWN0aXZlJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLmFkZENsYXNzKCdpbmFjdGl2ZScpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuamNhcm91c2VsQ29udHJvbCh7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6ICcrPTEnXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkKCcuamNhcm91c2VsLXBhZ2luYXRpb24nKVxyXG4gICAgICAgICAgICAub24oJ2pjYXJvdXNlbHBhZ2luYXRpb246YWN0aXZlJywgJ2EnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICQodGhpcykuYWRkQ2xhc3MoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAub24oJ2pjYXJvdXNlbHBhZ2luYXRpb246aW5hY3RpdmUnLCAnYScsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnYWN0aXZlJyk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5qY2Fyb3VzZWxQYWdpbmF0aW9uKCk7XHJcbiAgICB9KTtcclxufSkoalF1ZXJ5KTtcclxuXHJcbi8qKlxyXG4gKiBqUXVlcnkgY3VzdG9tIHNlbGVjdGJveGVzXHJcbiAqIFxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMDggS3J6eXN6dG9mIFN1c3p5xYRza2kgKHN1c3p5bnNraS5vcmcpXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZTpcclxuICogaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcclxuICpcclxuICogQHZlcnNpb24gMC42LjFcclxuICogQGNhdGVnb3J5IHZpc3VhbFxyXG4gKiBAcGFja2FnZSBqcXVlcnlcclxuICogQHN1YnBha2FnZSB1aS5zZWxlY3Rib3hcclxuICogQGF1dGhvciBLcnp5c3p0b2YgU3VzennFhHNraSA8ay5zdXN6eW5za2lAd2l0LmVkdS5wbD5cclxuKiovXHJcbmpRdWVyeS5mbi5zZWxlY3Rib3ggPSBmdW5jdGlvbihvcHRpb25zKXtcclxuXHQvKiBEZWZhdWx0IHNldHRpbmdzICovXHJcblx0dmFyIHNldHRpbmdzID0ge1xyXG5cdFx0Y2xhc3NOYW1lOiAnanF1ZXJ5LXNlbGVjdGJveCcsXHJcblx0XHRhbmltYXRpb25TcGVlZDogXCJub3JtYWxcIixcclxuXHRcdGxpc3Rib3hNYXhTaXplOiAxMCxcclxuXHRcdHJlcGxhY2VJbnZpc2libGU6IGZhbHNlXHJcblx0fTtcclxuXHR2YXIgY29tbW9uQ2xhc3MgPSAnanF1ZXJ5LWN1c3RvbS1zZWxlY3Rib3hlcy1yZXBsYWNlZCc7XHJcblx0dmFyIGxpc3RPcGVuID0gZmFsc2U7XHJcblx0dmFyIHNob3dMaXN0ID0gZnVuY3Rpb24obGlzdE9iaikge1xyXG5cdFx0dmFyIHNlbGVjdGJveCA9IGxpc3RPYmoucGFyZW50cygnLicgKyBzZXR0aW5ncy5jbGFzc05hbWUgKyAnJyk7XHJcblx0XHRsaXN0T2JqLnNsaWRlRG93bihzZXR0aW5ncy5hbmltYXRpb25TcGVlZCwgZnVuY3Rpb24oKXtcclxuXHRcdFx0bGlzdE9wZW4gPSB0cnVlO1xyXG5cdFx0fSk7XHJcblx0XHRzZWxlY3Rib3guYWRkQ2xhc3MoJ3NlbGVjdGhvdmVyJyk7XHJcblx0XHRqUXVlcnkoZG9jdW1lbnQpLmJpbmQoJ2NsaWNrJywgb25CbHVyTGlzdCk7XHJcblx0XHRyZXR1cm4gbGlzdE9iajtcclxuXHR9XHJcblx0dmFyIGhpZGVMaXN0ID0gZnVuY3Rpb24obGlzdE9iaikge1xyXG5cdFx0dmFyIHNlbGVjdGJveCA9IGxpc3RPYmoucGFyZW50cygnLicgKyBzZXR0aW5ncy5jbGFzc05hbWUgKyAnJyk7XHJcblx0XHRsaXN0T2JqLnNsaWRlVXAoc2V0dGluZ3MuYW5pbWF0aW9uU3BlZWQsIGZ1bmN0aW9uKCl7XHJcblx0XHRcdGxpc3RPcGVuID0gZmFsc2U7XHJcblx0XHRcdGpRdWVyeSh0aGlzKS5wYXJlbnRzKCcuJyArIHNldHRpbmdzLmNsYXNzTmFtZSArICcnKS5yZW1vdmVDbGFzcygnc2VsZWN0aG92ZXInKTtcclxuXHRcdH0pO1xyXG5cdFx0alF1ZXJ5KGRvY3VtZW50KS51bmJpbmQoJ2NsaWNrJywgb25CbHVyTGlzdCk7XHJcblx0XHRyZXR1cm4gbGlzdE9iajtcclxuXHR9XHJcblx0dmFyIG9uQmx1ckxpc3QgPSBmdW5jdGlvbihlKSB7XHJcblx0XHR2YXIgdHJndCA9IGUudGFyZ2V0O1xyXG5cdFx0dmFyIGN1cnJlbnRMaXN0RWxlbWVudHMgPSBqUXVlcnkoJy4nICsgc2V0dGluZ3MuY2xhc3NOYW1lICsgJy1saXN0OnZpc2libGUnKS5wYXJlbnQoKS5maW5kKCcqJykuYWRkQmFjaygpO1xyXG5cdFx0aWYoalF1ZXJ5LmluQXJyYXkodHJndCwgY3VycmVudExpc3RFbGVtZW50cyk8MCAmJiBsaXN0T3Blbikge1xyXG5cdFx0XHRoaWRlTGlzdCggalF1ZXJ5KCcuJyArIGNvbW1vbkNsYXNzICsgJy1saXN0JykgKTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblx0XHJcblx0LyogUHJvY2Vzc2luZyBzZXR0aW5ncyAqL1xyXG5cdHNldHRpbmdzID0galF1ZXJ5LmV4dGVuZChzZXR0aW5ncywgb3B0aW9ucyB8fCB7fSk7XHJcblx0LyogV3JhcHBpbmcgYWxsIHBhc3NlZCBlbGVtZW50cyAqL1xyXG5cdHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XHJcblx0XHR2YXIgX3RoaXMgPSBqUXVlcnkodGhpcyk7XHJcblx0XHRpZihfdGhpcy5maWx0ZXIoJzp2aXNpYmxlJykubGVuZ3RoID09IDAgJiYgIXNldHRpbmdzLnJlcGxhY2VJbnZpc2libGUpXHJcblx0XHRcdHJldHVybjtcclxuXHRcdHZhciByZXBsYWNlbWVudCA9IGpRdWVyeShcclxuXHRcdFx0JzxkaXYgY2xhc3M9XCInICsgc2V0dGluZ3MuY2xhc3NOYW1lICsgJyAnICsgY29tbW9uQ2xhc3MgKyAnXCI+JyArXHJcblx0XHRcdFx0JzxkaXYgY2xhc3M9XCInICsgc2V0dGluZ3MuY2xhc3NOYW1lICsgJy1tb3JlQnV0dG9uXCIgLz4nICtcclxuXHRcdFx0XHQnPGRpdiBjbGFzcz1cIicgKyBzZXR0aW5ncy5jbGFzc05hbWUgKyAnLWxpc3QgJyArIGNvbW1vbkNsYXNzICsgJy1saXN0XCIgLz4nICtcclxuXHRcdFx0XHQnPHNwYW4gY2xhc3M9XCInICsgc2V0dGluZ3MuY2xhc3NOYW1lICsgJy1jdXJyZW50SXRlbVwiIC8+JyArXHJcblx0XHRcdCc8L2Rpdj4nXHJcblx0XHQpO1xyXG5cdFx0alF1ZXJ5KCdvcHRpb24nLCBfdGhpcykuZWFjaChmdW5jdGlvbihrLHYpe1xyXG5cdFx0XHR2YXIgdiA9IGpRdWVyeSh2KTtcclxuXHRcdFx0dmFyIGxpc3RFbGVtZW50ID0gIGpRdWVyeSgnPHNwYW4gY2xhc3M9XCInICsgc2V0dGluZ3MuY2xhc3NOYW1lICsgJy1pdGVtIHZhbHVlLScrdi52YWwoKSsnIGl0ZW0tJytrKydcIj4nICsgdi50ZXh0KCkgKyAnPC9zcGFuPicpO1x0XHJcblx0XHRcdGxpc3RFbGVtZW50LmNsaWNrKGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0dmFyIHRoaXNMaXN0RWxlbWVudCA9IGpRdWVyeSh0aGlzKTtcclxuXHRcdFx0XHR2YXIgdGhpc1JlcGxhY21lbnQgPSB0aGlzTGlzdEVsZW1lbnQucGFyZW50cygnLicrc2V0dGluZ3MuY2xhc3NOYW1lKTtcclxuXHRcdFx0XHR2YXIgdGhpc0luZGV4ID0gdGhpc0xpc3RFbGVtZW50WzBdLmNsYXNzTmFtZS5zcGxpdCgnICcpO1xyXG5cdFx0XHRcdGZvciggazEgaW4gdGhpc0luZGV4ICkge1xyXG5cdFx0XHRcdFx0aWYoL15pdGVtLVswLTldKyQvLnRlc3QodGhpc0luZGV4W2sxXSkpIHtcclxuXHRcdFx0XHRcdFx0dGhpc0luZGV4ID0gcGFyc2VJbnQodGhpc0luZGV4W2sxXS5yZXBsYWNlKCdpdGVtLScsJycpLCAxMCk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0dmFyIHRoaXNWYWx1ZSA9IHRoaXNMaXN0RWxlbWVudFswXS5jbGFzc05hbWUuc3BsaXQoJyAnKTtcclxuXHRcdFx0XHRmb3IoIGsxIGluIHRoaXNWYWx1ZSApIHtcclxuXHRcdFx0XHRcdGlmKC9edmFsdWUtLiskLy50ZXN0KHRoaXNWYWx1ZVtrMV0pKSB7XHJcblx0XHRcdFx0XHRcdHRoaXNWYWx1ZSA9IHRoaXNWYWx1ZVtrMV0ucmVwbGFjZSgndmFsdWUtJywnJyk7XHJcblx0XHRcdFx0XHRcdGJyZWFrO1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdFx0dGhpc1JlcGxhY21lbnRcclxuXHRcdFx0XHRcdC5maW5kKCcuJyArIHNldHRpbmdzLmNsYXNzTmFtZSArICctY3VycmVudEl0ZW0nKVxyXG5cdFx0XHRcdFx0LnRleHQodGhpc0xpc3RFbGVtZW50LnRleHQoKSk7XHJcblx0XHRcdFx0dGhpc1JlcGxhY21lbnRcclxuXHRcdFx0XHRcdC5maW5kKCdzZWxlY3QnKVxyXG5cdFx0XHRcdFx0LnZhbCh0aGlzVmFsdWUpXHJcblx0XHRcdFx0XHQudHJpZ2dlckhhbmRsZXIoJ2NoYW5nZScpO1xyXG5cdFx0XHRcdHZhciB0aGlzU3VibGlzdCA9IHRoaXNSZXBsYWNtZW50LmZpbmQoJy4nICsgc2V0dGluZ3MuY2xhc3NOYW1lICsgJy1saXN0Jyk7XHJcblx0XHRcdFx0aWYodGhpc1N1Ymxpc3QuZmlsdGVyKFwiOnZpc2libGVcIikubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdFx0aGlkZUxpc3QoIHRoaXNTdWJsaXN0ICk7XHJcblx0XHRcdFx0fWVsc2V7XHJcblx0XHRcdFx0XHRzaG93TGlzdCggdGhpc1N1Ymxpc3QgKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0pLmJpbmQoJ21vdXNlZW50ZXInLGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0alF1ZXJ5KHRoaXMpLmFkZENsYXNzKCdsaXN0ZWxlbWVudGhvdmVyJyk7XHJcblx0XHRcdH0pLmJpbmQoJ21vdXNlbGVhdmUnLGZ1bmN0aW9uKCl7XHJcblx0XHRcdFx0alF1ZXJ5KHRoaXMpLnJlbW92ZUNsYXNzKCdsaXN0ZWxlbWVudGhvdmVyJyk7XHJcblx0XHRcdH0pO1xyXG5cdFx0XHRqUXVlcnkoJy4nICsgc2V0dGluZ3MuY2xhc3NOYW1lICsgJy1saXN0JywgcmVwbGFjZW1lbnQpLmFwcGVuZChsaXN0RWxlbWVudCk7XHJcblx0XHRcdGlmKHYuZmlsdGVyKCc6c2VsZWN0ZWQnKS5sZW5ndGggPiAwKSB7XHJcblx0XHRcdFx0alF1ZXJ5KCcuJytzZXR0aW5ncy5jbGFzc05hbWUgKyAnLWN1cnJlbnRJdGVtJywgcmVwbGFjZW1lbnQpLnRleHQodi50ZXh0KCkpO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdHJlcGxhY2VtZW50LmZpbmQoJy4nICsgc2V0dGluZ3MuY2xhc3NOYW1lICsgJy1tb3JlQnV0dG9uJykuY2xpY2soZnVuY3Rpb24oKXtcclxuXHRcdFx0dmFyIHRoaXNNb3JlQnV0dG9uID0galF1ZXJ5KHRoaXMpO1xyXG5cdFx0XHR2YXIgb3RoZXJMaXN0cyA9IGpRdWVyeSgnLicgKyBzZXR0aW5ncy5jbGFzc05hbWUgKyAnLWxpc3QnKVxyXG5cdFx0XHRcdC5ub3QodGhpc01vcmVCdXR0b24uc2libGluZ3MoJy4nICsgc2V0dGluZ3MuY2xhc3NOYW1lICsgJy1saXN0JykpO1xyXG5cdFx0XHRoaWRlTGlzdCggb3RoZXJMaXN0cyApO1xyXG5cdFx0XHR2YXIgdGhpc0xpc3QgPSB0aGlzTW9yZUJ1dHRvbi5zaWJsaW5ncygnLicgKyBzZXR0aW5ncy5jbGFzc05hbWUgKyAnLWxpc3QnKTtcclxuXHRcdFx0aWYodGhpc0xpc3QuZmlsdGVyKFwiOnZpc2libGVcIikubGVuZ3RoID4gMCkge1xyXG5cdFx0XHRcdGhpZGVMaXN0KCB0aGlzTGlzdCApO1xyXG5cdFx0XHR9ZWxzZXtcclxuXHRcdFx0XHRzaG93TGlzdCggdGhpc0xpc3QgKTtcclxuXHRcdFx0fVxyXG5cdFx0fSkuYmluZCgnbW91c2VlbnRlcicsZnVuY3Rpb24oKXtcclxuXHRcdFx0alF1ZXJ5KHRoaXMpLmFkZENsYXNzKCdtb3JlYnV0dG9uaG92ZXInKTtcclxuXHRcdH0pLmJpbmQoJ21vdXNlbGVhdmUnLGZ1bmN0aW9uKCl7XHJcblx0XHRcdGpRdWVyeSh0aGlzKS5yZW1vdmVDbGFzcygnbW9yZWJ1dHRvbmhvdmVyJyk7XHJcblx0XHR9KTtcclxuXHRcdF90aGlzLmhpZGUoKS5yZXBsYWNlV2l0aChyZXBsYWNlbWVudCkuYXBwZW5kVG8ocmVwbGFjZW1lbnQpO1xyXG5cdFx0dmFyIHRoaXNMaXN0Qm94ID0gcmVwbGFjZW1lbnQuZmluZCgnLicgKyBzZXR0aW5ncy5jbGFzc05hbWUgKyAnLWxpc3QnKTtcclxuXHRcdHZhciB0aGlzTGlzdEJveFNpemUgPSB0aGlzTGlzdEJveC5maW5kKCcuJyArIHNldHRpbmdzLmNsYXNzTmFtZSArICctaXRlbScpLmxlbmd0aDtcclxuXHRcdGlmKHRoaXNMaXN0Qm94U2l6ZSA+IHNldHRpbmdzLmxpc3Rib3hNYXhTaXplKVxyXG5cdFx0XHR0aGlzTGlzdEJveFNpemUgPSBzZXR0aW5ncy5saXN0Ym94TWF4U2l6ZTtcclxuXHRcdGlmKHRoaXNMaXN0Qm94U2l6ZSA9PSAwKVxyXG5cdFx0XHR0aGlzTGlzdEJveFNpemUgPSAxO1x0XHJcblx0XHR2YXIgdGhpc0xpc3RCb3hXaWR0aCA9IE1hdGgucm91bmQoX3RoaXMud2lkdGgoKSArIDUpO1xyXG5cdFx0XHJcblx0XHRyZXBsYWNlbWVudC5jc3MoJ3dpZHRoJywgdGhpc0xpc3RCb3hXaWR0aCArICdweCcpO1xyXG5cdFx0dGhpc0xpc3RCb3guY3NzKHtcclxuXHRcdFx0d2lkdGg6IE1hdGgucm91bmQodGhpc0xpc3RCb3hXaWR0aC01KSArICdweCcsXHJcblx0XHRcdGhlaWdodDogdGhpc0xpc3RCb3hTaXplICsgJ2VtJ1xyXG5cdFx0fSk7XHJcblx0fSk7XHJcbn1cclxualF1ZXJ5LmZuLnVuc2VsZWN0Ym94ID0gZnVuY3Rpb24oKXtcclxuXHR2YXIgY29tbW9uQ2xhc3MgPSAnanF1ZXJ5LWN1c3RvbS1zZWxlY3Rib3hlcy1yZXBsYWNlZCc7XHJcblx0cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpIHtcclxuXHRcdHZhciBzZWxlY3RUb1JlbW92ZSA9IGpRdWVyeSh0aGlzKS5maWx0ZXIoJy4nICsgY29tbW9uQ2xhc3MpO1xyXG5cdFx0c2VsZWN0VG9SZW1vdmUucmVwbGFjZVdpdGgoc2VsZWN0VG9SZW1vdmUuZmluZCgnc2VsZWN0Jykuc2hvdygpKTtcdFx0XHJcblx0fSk7XHJcbn1cclxuXHJcbiQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkge1xyXG5cdCQoXCIjZGVmYXVsdC11c2FnZS1zZWxlY3RcIikuc2VsZWN0Ym94KCk7XHJcbn0pO1xyXG5cclxualF1ZXJ5KGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpe1xyXG5cdCAvKiDQv9GA0Lgg0LrQu9C40LrQtSDQvdCwINGH0LXQutCx0L7QutGB0LUg0LzQtdC90Y/QtdC8INC10LPQviDQstC40LQg0Lgg0LfQvdCw0YfQtdC90LjQtSAqL1xyXG5cdGpRdWVyeShcIi5jaGVja2JveC1qc19faW5wdXQtd3JhcHBlclwiKS5tb3VzZWRvd24oXHJcblx0ICBmdW5jdGlvbigpIHtcclxuICAgICBcdGNoYW5nZUNoZWNrKGpRdWVyeSh0aGlzKSk7XHJcbiAgfSk7XHJcblxyXG4vKiDQv9GA0Lgg0LfQsNCz0YDRg9C30LrQtSDRgdGC0YDQsNC90LjRhtGLINC90YPQttC90L4g0L/RgNC+0LLQtdGA0LjRgtGMINC60LDQutC+0LUg0LfQvdCw0YfQtdC90LjQtSDQuNC80LXQtdGCINGH0LXQutCx0L7QutGBINC4INCyINGB0L7QvtGC0LLQtdGC0YHRgtCy0LjQuCDRgSDQvdC40Lwg0LLRi9GB0YLQsNCy0LjRgtGMINCy0LjQtCAqL1xyXG5cdGpRdWVyeShcIi5jaGVja2JveC1qc19faW5wdXQtd3JhcHBlclwiKS5lYWNoKFxyXG5cdCAgZnVuY3Rpb24oKSB7XHJcbiAgICAgXHRjaGFuZ2VDaGVja1N0YXJ0KGpRdWVyeSh0aGlzKSk7XHJcbiAgfSk7XHJcbn0pO1xyXG5cclxuLyog0YTRg9C90LrRhtC40Y8g0YHQvNC10L3RiyDQstC40LTQsCDQuCDQt9C90LDRh9C10L3QuNGPINGH0LXQutCx0L7QutGB0LAgZWwgLSBzcGFuINC60L7QvdGC0LXQudC90LXRgCDQtNGP0Lsg0L7QsdGL0YfQvdC+0LPQviDRh9C10LrQsdC+0LrRgdCwIGlucHV0IC0g0YfQtdC60LHQvtC60YEgKi9cclxuZnVuY3Rpb24gY2hhbmdlQ2hlY2soZWwpIHtcclxuICB2YXIgZWwgPSBlbCxcclxuICBpbnB1dCA9IGVsLmZpbmQoXCJpbnB1dFwiKS5lcSgwKTtcclxuICBpZighaW5wdXQuYXR0cihcImNoZWNrZWRcIikpIHtcclxuICBcdGVsLmNzcyhcImJhY2tncm91bmQtcG9zaXRpb25cIixcIjAgLTE3cHhcIik7ICAgIFxyXG4gIFx0aW5wdXQuYXR0cihcImNoZWNrZWRcIiwgdHJ1ZSlcclxuICB9IGVsc2Uge1xyXG4gIFx0ZWwuY3NzKFwiYmFja2dyb3VuZC1wb3NpdGlvblwiLFwiMCAwXCIpOyAgICBcclxuICBcdGlucHV0LmF0dHIoXCJjaGVja2VkXCIsIGZhbHNlKVxyXG4gIH1cclxuICByZXR1cm4gdHJ1ZTtcclxuIH1cclxuXHJcbi8q0LXRgdC70Lgg0YPRgdGC0LDQvdC+0LLQu9C10L0g0LDRgtGA0LjQsdGD0YIgY2hlY2tlZCwg0LzQtdC90Y/QtdC8INCy0LjQtCDRh9C10LrQsdC+0LrRgdCwKi9cclxuZnVuY3Rpb24gY2hhbmdlQ2hlY2tTdGFydChlbCkge1xyXG5cdHZhciBlbCA9IGVsLFxyXG4gXHRpbnB1dCA9IGVsLmZpbmQoXCJpbnB1dFwiKS5lcSgwKTtcclxuIFx0aWYoaW5wdXQuYXR0cihcImNoZWNrZWRcIikpIHtcclxuIFx0XHRlbC5jc3MoXCJiYWNrZ3JvdW5kLXBvc2l0aW9uXCIsXCIwIC0xN3B4XCIpOyAgICBcclxuIFx0fVxyXG4gXHRyZXR1cm4gdHJ1ZTtcclxufVxyXG5cclxuJChkb2N1bWVudCkucmVhZHkoZnVuY3Rpb24gKCkge1x0XHJcblx0XHJcblx0JCgnLmRyb3BfYm94JykuaG92ZXIoXHJcblx0XHRmdW5jdGlvbiAoKSB7XHJcblx0XHRcdCQodGhpcykuZmluZCgnLnN1Ym1lbnUnKS5zdG9wKCkuc2xpZGVEb3duKDcwMCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiIzBBMEEwQVwiXHJcbiAgICAgICAgICB9LCA1MDAgKTtcclxuXHRcdH0sIFxyXG5cdFx0ZnVuY3Rpb24gKCkge1xyXG5cdFx0XHQkKHRoaXMpLmZpbmQoJy5zdWJtZW51Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiMzMDMwMzBcIlxyXG4gICAgICAgICAgfSwgNDAwICkuc2xpZGVVcCg1MDApO1xyXG5cdFx0fVxyXG5cdCk7XHJcblxyXG5cdCQoJy5kcm9wX2JveC1sZXZlbC0yJykuaG92ZXIoXHJcblx0XHRmdW5jdGlvbiAoKSB7XHJcblx0XHRcdCQodGhpcykuZmluZCgndWwnKS5zdG9wKCkuc2xpZGVEb3duKDgwMCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiIzBBMEEwQVwiXHJcbiAgICAgICAgICB9LCA1MDAgKTs7XHJcblx0XHR9LFxyXG5cdFx0ZnVuY3Rpb24gKCkge1xyXG5cdFx0XHQkKHRoaXMpLmZpbmQoJ3VsJykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiMzMDMwMzBcIlxyXG4gICAgICAgICAgfSwgNDAwICkuc2xpZGVVcCg1MDApOztcclxuXHRcdH1cclxuXHQpO1xyXG59KTsiXX0=
